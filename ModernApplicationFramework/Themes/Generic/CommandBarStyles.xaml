<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:this="clr-namespace:ModernApplicationFramework.Controls"
                    xmlns:colors="clr-namespace:ModernApplicationFramework.Core.Themes"
                    xmlns:converters="clr-namespace:ModernApplicationFramework.Core.Converters"
                    xmlns:utilities="clr-namespace:ModernApplicationFramework.Controls.Utilities"
                    xmlns:accessKey="clr-namespace:ModernApplicationFramework.Core.Converters.AccessKey"
                    xmlns:utilities1="clr-namespace:ModernApplicationFramework.Core.Utilities"
                    xmlns:general="clr-namespace:ModernApplicationFramework.Core.Converters.General"
                    xmlns:internals="clr-namespace:ModernApplicationFramework.Controls.Internals"
                    xmlns:native="clr-namespace:ModernApplicationFramework.Native"
                    xmlns:customize="clr-namespace:ModernApplicationFramework.Core.Converters.Customize"
                    xmlns:commandBar="clr-namespace:ModernApplicationFramework.Basics.CommandBar"
                    xmlns:basics="clr-namespace:ModernApplicationFramework.Basics"
                    xmlns:menu="clr-namespace:ModernApplicationFramework.Controls.Menu"
                    xmlns:buttons="clr-namespace:ModernApplicationFramework.Controls.Buttons"
                    xmlns:windows="clr-namespace:ModernApplicationFramework.Controls.Windows"
                    xmlns:comboBox="clr-namespace:ModernApplicationFramework.Controls.ComboBox"
                    xmlns:converters1="clr-namespace:ModernApplicationFramework.Utilities.Converters;assembly=ModernApplicationFramework.Utilities"
                    xmlns:imaging="clr-namespace:ModernApplicationFramework.Utilities.Imaging;assembly=ModernApplicationFramework.Utilities"
                    xmlns:extensions="clr-namespace:ModernApplicationFramework.Controls.Extensions">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ComboBox.xaml"/>
        <ResourceDictionary Source="ContextMenu.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Geometry x:Key="DownArrowGeometry">M 0 0 L 3 3 L 6 0 Z</Geometry>
    <Geometry x:Key="Checkmark">F1 M 5,11 L 3,7 L 5,7 L 6,9 L 9,3 L 11,3 L 7,11 L 5,11 Z</Geometry>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>

    <accessKey:AccessKeyRemovingConverter x:Key="AccessKeyRemovingConverter"/>
    <converters1:BrushToColorConverter x:Key="BrushToColorConverter"/>
    <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
    <accessKey:AccessKeyConverter x:Key="AccessKeyConverter"/>
    <accessKey:AccessKeyUnderliningConverter x:Key="AccessKeyUnderliningConverter"/>
    <converters:ToolTipMultiConverter x:Key="ToolTipMultiConverter"/>
    <general:NotNullConverter x:Key="NotNullConverter"/>
    <converters:CommandBarItemCommandConverter x:Key="CommandBarItemCommandConverter"/>
    <converters:DockToOrienationConverter x:Key="DockToOrienationConverter"/>
    <converters:CommandBarFormattedStringConverter x:Key="CommandBarFormattedStringConverter"/>
    <converters:IsSplitButtonModelConverter x:Key="IsSplitButtonModelConverter"/>
    <customize:IsNotSeparatorModelConverter x:Key="IsNotSeparatorModelConverter"/>
    <customize:IsComboBoxModelConverter x:Key="IsComboBoxModelConverter"/>
    <customize:IsCustomMenuConverter x:Key="IsCustomMenuConverter"/>
    <converters:ComboBoxWidthConverter x:Key="ComboBoxWidthConverter"/>
    <converters:CommandExecutionToBooleanConverter x:Key="CommandExecutionToBooleanConverter"/>
    <converters:MultiToolTipMultiConverter x:Key="MultiToolTipMultiConverter"/>
    <converters:DockLocationConverter x:Key="DockLocationConverter"/>
    <converters:StringUppercaseConverter x:Key="StringUppercaseConverter"/>

    <Style TargetType="{x:Type menu:Menu}" BasedOn="{StaticResource {x:Type Menu}}">
        <Setter Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandShelfHighlight}}"/>
        <Setter Property="imaging:ImageThemingUtilities.ImageBackgroundColor">
            <Setter.Value>
                <Binding Path="Background" RelativeSource="{RelativeSource Self}"
                         Converter="{StaticResource BrushToColorConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle"/>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Path="IsVisible" Converter="{StaticResource BoolToVisConverter}"/>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarMenuStyle" TargetType="{x:Type Menu}"
           BasedOn="{StaticResource {x:Type Menu}}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}"/>
        <Setter Property="IsMainMenu" Value="false"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=TopLevelHeaderTemplateKey}"
                     TargetType="{x:Type menu:MenuItem}">
        <Grid x:Name="HostingGrid">
            <Border x:Name="Bg" Padding="{TemplateBinding Control.Padding}" Margin="0,1,0,1"
                    BorderBrush="Transparent" BorderThickness="1" Background="{TemplateBinding Control.Background}">
                <Grid x:Name="ContentGrid" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="0"
                                      Margin="3,0,6,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                        <ContentPresenter.Content>
                            <Binding Path="Header" RelativeSource="{RelativeSource TemplatedParent}"/>
                        </ContentPresenter.Content>
                    </ContentPresenter>
                    <Grid Margin="0,0,3,0" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}"
                              Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuGlyph}}" 
                              Visibility="{TemplateBinding IsPlacedOnToolBar, Converter={StaticResource BoolToVisConverter}}"/>
                    </Grid>
                </Grid>
            </Border>
            <Popup x:Name="PART_Popup" HorizontalOffset="0" VerticalOffset="-2" AllowsTransparency="True" Placement="Bottom" Focusable="False"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                <Popup.IsOpen>
                    <Binding Path="IsSubmenuOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
                </Popup.IsOpen>
                <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" SnapsToDevicePixels="True">
                    <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuIconBackground}}">
                        <menu:MenuScrollViewer>
                            <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBackgroundGradientBegin}}" RenderOptions.BitmapScalingMode="{x:Static native:DpiHelper.BitmapScalingMode}" RenderOptions.ClearTypeHint="Enabled">
                                <imaging:ImageThemingUtilities.ImageBackgroundColor>
                                    <Binding Path="Background" ElementName="IconBackground" Converter="{StaticResource BrushToColorConverter}"/>
                                </imaging:ImageThemingUtilities.ImageBackgroundColor>
                                <Border x:Name="IconBackground" Width="28"
                                        Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuIconBackground}}"
                                        HorizontalAlignment="Left"/>
                                <ItemsPresenter Margin="3" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle"
                                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Grid.IsSharedSizeScope="True"></ItemsPresenter>
                            </Grid>
                        </menu:MenuScrollViewer>
                        <Border BorderThickness="1" BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBorder}}"/>
                        <Border Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBackgroundGradientBegin}}"
                                VerticalAlignment="Top" HorizontalAlignment="Left" Height="2">
                            <FrameworkElement.Margin>
                                <extensions:MenuPopupPositionerExtension ElementName="Bg"/>
                            </FrameworkElement.Margin>
                        </Border>
                    </Grid>
                </windows:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="Vertical">
                        <Condition.Binding>
                            <Binding RelativeSource="{RelativeSource Self}" Path="ParentToolBar.Orientation"/>
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="False">
                        <Condition.Binding>
                            <Binding RelativeSource="{RelativeSource Self}" Path="HostContainer.(ToolBar.IsOverflowItem)"/>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ContentGrid" Property="FrameworkElement.LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="90"/>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="PART_Popup" Property="Popup.VerticalOffset" Value="1"/>
                <Setter TargetName="Bg" Property="Border.Padding" Value="0,5,1,1"/>
            </MultiDataTrigger>
            <DataTrigger Value="{x:Static Dock.Left}">
                <DataTrigger.Binding>
                    <Binding RelativeSource="{RelativeSource Self}" Path="ParentToolBar.DataContext.Position"
                             Converter="{StaticResource DockLocationConverter}"/>
                </DataTrigger.Binding>
                <Setter TargetName="PART_Popup" Property="Popup.Placement" Value="Right"/>
                <Setter TargetName="PART_Popup" Property="Popup.HorizontalOffset" Value="2"/>
            </DataTrigger>
            <DataTrigger Value="{x:Static Dock.Right}">
                <DataTrigger.Binding>
                    <Binding RelativeSource="{RelativeSource Self}" Path="ParentToolBar.DataContext.Position"
                             Converter="{StaticResource DockLocationConverter}"/>
                </DataTrigger.Binding>
                <Setter TargetName="PART_Popup" Property="Popup.Placement" Value="Left"/>
                <Setter TargetName="PART_Popup" Property="Popup.HorizontalOffset" Value="-2"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="False">
                        <Condition.Binding>
                            <Binding RelativeSource="{RelativeSource Self}" Path="IsPlacedOnToolBar"/>
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="false">
                        <Condition.Binding>
                            <Binding Source="{x:Static basics:EnvironmentGeneralOptions.Instance}" Path="UseTitleCaseOnMenu"/>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ContentPresenter" Property="Content">
                    <Setter.Value>
                        <Binding Path="Header" RelativeSource="{RelativeSource TemplatedParent}" Converter="{StaticResource StringUppercaseConverter}"/>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled}" Value="False"/>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding RelativeSource="{RelativeSource Self}" Path="IsPlacedOnToolBar"/>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Arrow" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}"
                        Property="Shape.Fill"/>
            </MultiDataTrigger>

            <Trigger Property="menu:MenuItem.IsPlacedOnToolBar" Value="true">
                <Setter TargetName="ContentPresenter" Property="FrameworkElement.Margin" Value="0,0,3,0"/>
            </Trigger>

            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" Property="TextElement.Foreground"/>
            </Trigger>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <Binding Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" Path="AreAnimationsAllowed"/>
                </DataTrigger.Binding>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding ElementName="PART_Popup" Path="(Popup.HasDropShadow)"/>
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" Path="AreGradientsAllowed"/>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shdw" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" Property="windows:SystemDropShadowChrome.Color"/>
            </MultiDataTrigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Bg" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}"/>
                <Setter TargetName="Bg" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}"/>
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}"/>
                <Setter TargetName="Arrow" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuMouseOverGlyph}}"/>
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="Bg" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBorder}}"/>
                <Setter TargetName="Bg" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBackgroundGradientBegin}}"/>
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuMouseDownGlyph}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=SubmenuHeaderTemplateKey}" TargetType="{x:Type menu:MenuItem}">
        <Grid SnapsToDevicePixels="True" Background="Transparent">
            <Grid MinHeight="22" MaxWidth="{x:Static menu:MenuItem.MaxMenuWidth}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="26" SharedSizeGroup="MenuItemicoColumnGroup"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="37"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                    <ColumnDefinition Width="17"/>
                </Grid.ColumnDefinitions>
                <Rectangle x:Name="Bg" Fill="Transparent" Stroke="Transparent" StrokeThickness="0" Grid.ColumnSpan="6"/>
                <ContentPresenter Grid.Column="0" x:Name="Icon" Margin="2,1,4,1" Width="16" Height="16"
                                  VerticalAlignment="Center" ContentSource="Icon" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                <ContentPresenter Grid.Column="1" ContentSource="Header" Margin="8,1,0,1" RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"/>
                <Path x:Name="Arrow" Grid.Column="4" VerticalAlignment="Center" Margin="4,0,0,0"
                      Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuSubmenuGlyph}}"
                      Data="{StaticResource RightArrow}"/>
            </Grid>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Placement="Right" VerticalOffset="0"
                   HorizontalOffset="0" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                <Popup.IsOpen>
                    <Binding Path="IsSubmenuOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
                </Popup.IsOpen>
                <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                    <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuIconBackground}}">
                        <menu:MenuScrollViewer>
                            <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBackgroundGradientBegin}}"
                                  RenderOptions.BitmapScalingMode="{x:Static native:DpiHelper.BitmapScalingMode}" RenderOptions.ClearTypeHint="Enabled">
                                <imaging:ImageThemingUtilities.ImageBackgroundColor>
                                    <Binding Path="Background" ElementName="IconBackground" Converter="{StaticResource BrushToColorConverter}"/>
                                </imaging:ImageThemingUtilities.ImageBackgroundColor>
                                <Border x:Name="IconBackground" Width="28" HorizontalAlignment="Left"
                                        Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuIconBackground}}"/>
                                <ItemsPresenter KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="3"
                                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Grid.IsSharedSizeScope="true"/>
                            </Grid>
                        </menu:MenuScrollViewer>
                        <Border BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBorder}}"
                                BorderThickness="1"/>
                    </Grid>
                </windows:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <Binding Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" Path="AreAnimationsAllowed"/>
                </DataTrigger.Binding>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding ElementName="PART_Popup" Path="(Popup.HasDropShadow)"/>
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" Path="AreGradientsAllowed"/>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shdw" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" Property="windows:SystemDropShadowChrome.Color"/>
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Bg" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOver}}"/>
                <Setter TargetName="Bg" Property="Stroke" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverBorder}}"/>
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverText}}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuMouseOverSubmenuGlyph}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=SubmenuItemTemplateKey}" TargetType="{x:Type menu:MenuItem}">
        <Grid SnapsToDevicePixels="True" Background="Transparent" MinHeight="22" MaxWidth="{x:Static menu:MenuItem.MaxMenuWidth}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="26" SharedSizeGroup="MenuItemIconColumnGroup"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="37"/>
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                <ColumnDefinition Width="17"/>
            </Grid.ColumnDefinitions>
            <Rectangle x:Name="Bg" Stroke="Transparent" Fill="Transparent" StrokeThickness="0" Grid.ColumnSpan="5"/>
            <Border x:Name="IconBorder" VerticalAlignment="Center" HorizontalAlignment="Center" BorderThickness="1" Padding="1"
                    Margin="2,0,2,0" Grid.Column="0">
                <ContentPresenter x:Name="Icon" Width="16" Height="16" VerticalAlignment="Center" ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed"/>
            </Border>
            <Border x:Name="GlyphPanel" Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelectedIcon}}" 
                    BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarCheckBox}}" BorderThickness="0" 
                    Margin="2,0,2,0" Visibility="Collapsed" Width="18" Height="18" Grid.Column="0">
                <Path x:Name="Glyph" Width="16" Height="16" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarCheckBox}}"
                      FlowDirection="LeftToRight" Data="{StaticResource Checkmark}"/>
            </Border>
            <ContentPresenter Grid.Column="1" ContentSource="Header" Margin="8,1,0,1" VerticalAlignment="Center"
                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            <TextBlock Grid.Column="3" Text="{TemplateBinding InputGestureText}" Margin="{TemplateBinding Padding}" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Flags.Pict}" Value="False"/>
                    <Condition Binding="{Binding Flags.TextOnly}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Flags.Pict}" Value="True"/>
                    <Condition Binding="{Binding Flags.TextOnly}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Visible"/>
            </MultiDataTrigger>
            <Trigger Property="MenuItem.Icon">
                <Trigger.Value>
                    <x:NullExtension/>
                </Trigger.Value>
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.Icon">
                        <Condition.Value>
                            <x:NullExtension/>
                        </Condition.Value>
                    </Condition>
                    <Condition Property="MenuItem.IsChecked" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </MultiTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="Icon" RelativeSource="{RelativeSource Self}" Converter="{StaticResource NotNullConverter}"/>
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="IsChecked" RelativeSource="{RelativeSource Self}"/>
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="False">
                        <Condition.Binding>
                            <Binding Path="IsHighlighted" RelativeSource="{RelativeSource Self}"/>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconBorder"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelected}}"
                        Property="Border.Background"/>
                <Setter TargetName="IconBorder"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelectedBorder}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="Icon" RelativeSource="{RelativeSource Self}" Converter="{StaticResource NotNullConverter}"/>
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="IsChecked" RelativeSource="{RelativeSource Self}"/>
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="IsHighlighted" RelativeSource="{RelativeSource Self}"/>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconBorder"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIcon}}"
                        Property="Border.Background"/>
                <Setter TargetName="IconBorder"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIconBorder}}"
                        Property="Border.BorderBrush"/>
            </MultiDataTrigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="Bg"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOver}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="Bg"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverBorder}}"
                        Property="Shape.Stroke"/>
                <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverText}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="GlyphPanel"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIcon}}"
                        Property="Border.Background"/>
                <Setter TargetName="GlyphPanel"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarCheckBoxMouseOver}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="Glyph"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarCheckBoxMouseOver}}"
                        Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}"
                        Property="Control.Foreground"/>
                <Setter TargetName="GlyphPanel"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelectedIconDisabled}}"
                        Property="Border.Background"/>
                <Setter TargetName="GlyphPanel"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarCheckBoxDisabled}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="Glyph"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarCheckBoxDisabled}}"
                        Property="Shape.Fill"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="SplitButtonOnMenuTemplate" TargetType="{x:Type buttons:SplitButton}">
        <Grid SnapsToDevicePixels="True" Background="Transparent">
            <Grid MinHeight="22" MaxHeight="{x:Static menu:MenuItem.MaxMenuWidth}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="26" SharedSizeGroup="MenuItemColumnGroup"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="37"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                    <ColumnDefinition Width="17"/>
                </Grid.ColumnDefinitions>
                <Rectangle x:Name="Bg" Fill="Transparent" Stroke="Transparent" StrokeThickness="0" Grid.ColumnSpan="6"/>
                <ContentPresenter Grid.Column="0" x:Name="Icon" Margin="2,1,4,1" Width="16" Height="16" VerticalAlignment="Center" ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <ContentPresenter Grid.Column="1" ContentSource="Header" Margin="8,1,0,1" RecognizesAccessKey="True" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                <Path x:Name="Arrow" Grid.Column="4" VerticalAlignment="Center" Margin="4,0,0,0"
                      Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuSubmenuGlyph}}"
                      Data="{StaticResource RightArrow}"/>
            </Grid>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Right" VerticalOffset="0"
                   HorizontalOffset="0" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                <Popup.IsOpen>
                    <Binding Path="IsSubmenuOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
                </Popup.IsOpen>
                <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                    <Border BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.DropDownPopupBorder}}"
                            BorderThickness="1">
                        <Grid SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_ScrollViewer" Grid.Row="0" VerticalScrollBarVisibility="Auto">
                                <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.DropDownPopupBackgroundBegin}}">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" Margin="3"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.IsSharedSizeScope="True"/>
                                </Grid>
                            </ScrollViewer>
                            <StatusBar HorizontalAlignment="Stretch" Grid.Row="1"
                                       Background="{DynamicResource {x:Static colors:EnvironmentColors.SystemWindow}}"
                                       Foreground="{DynamicResource {x:Static colors:EnvironmentColors.SystemGrayText}}">
                                <StatusBarItem HorizontalAlignment="Center">
                                    <TextBlock Text="{Binding StatusString}"/>
                                </StatusBarItem>
                            </StatusBar>
                        </Grid>
                    </Border>
                </windows:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <Binding Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" Path="AreAnimationsAllowed"/>
                </DataTrigger.Binding>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding ElementName="PART_Popup" Path="(Popup.HasDropShadow)"/>
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" Path="AreGradientsAllowed"/>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shdw" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" Property="windows:SystemDropShadowChrome.Color"/>
            </MultiDataTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="Arrow"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}"
                        Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="Bg"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOver}}"
                        Property="Shape.Fill"/>
                <Setter TargetName="Bg"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverBorder}}"
                        Property="Shape.Stroke"/>
                <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverText}}"
                        Property="TextElement.Foreground"/>
                <Setter TargetName="Arrow"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuMouseOverSubmenuGlyph}}"
                        Property="Shape.Fill"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="{x:Static menu:Menu.SeparatorStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel SnapsToDevicePixels="True" Margin="2" Orientation="Horizontal">
                        <Rectangle Width="1" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarToolBarSeparator}}"/>
                        <Rectangle Width="1" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarToolBarSeparatorHighlight}}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static menu:Menu.ButtonStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="extensions:MenuBehavior.UpdateCommandUiItems" Value="True" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="CommandDefinition.ShortcutText" Mode="OneWay"/>
            </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}"/>
        <Setter Property="Visibility"
                Value="{Binding IsVisible, Converter={StaticResource BoolToVisConverter}}"/>
        <Setter Property="Command">
            <Setter.Value>
                <Binding Converter="{StaticResource CommandBarItemCommandConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="ToolTip">
            <Setter.Value>
                <Binding Mode="OneWay" Path="CommandDefinition.ToolTip" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTipService.ShowOnDisabled" Value="true"/>
        <Setter Property="IsChecked" Value="{Binding IsChecked}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type menu:MenuItem}">
                    <Border x:Name="Border" BorderBrush="Transparent" Background="Transparent" BorderThickness="1">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle x:Name="Bg" Fill="Transparent" Stroke="Transparent" StrokeThickness="0"
                                       Grid.ColumnSpan="2"/>
                            <ContentPresenter x:Name="Image" Content="{TemplateBinding Icon}" Margin="2" Grid.Column="0"
                                              HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"/>
                            <AccessText x:Name="Text" Margin="2" Grid.Column="1" VerticalAlignment="Center"
                                        HorizontalAlignment="Center" Visibility="Collapsed" Text="{Binding Text, Converter={StaticResource AccessKeyConverter}}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True" Binding="{Binding Flags.Pict}">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Flags.Pict}" Value="False"/>
                                <Condition Binding="{Binding Flags.TextOnly}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                        <DataTrigger Value="True" Binding="{Binding Flags.TextOnly}">
                            <Setter TargetName="Text" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Icon, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Text" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Text" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" Property="AccessText.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bg" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}"
                                    Property="Shape.Stroke"/>
                            <Setter TargetName="Bg" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}"
                                    Property="Shape.Fill"/>
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Bg" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}"
                                    Property="Shape.Stroke"/>
                            <Setter TargetName="Bg" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}"
                                    Property="Shape.Fill"/>
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelectedBorder}}" TargetName="Border"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelected}}" TargetName="Border"/>
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextSelected}}" Property="TextElement.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource IsSplitButtonModelConverter}"/>
                </DataTrigger.Binding>
                <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type menu:MenuItem}">
                            <Menu FocusManager.IsFocusScope="False" Style="{StaticResource ToolBarMenuStyle}">
                                <AutomationProperties.Name>
                                    <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
                                </AutomationProperties.Name>
                                <ItemsControl.Items>
                                    <buttons:SplitButton x:Name="PART_FocusTarget" Icon="{TemplateBinding Icon}"
                                                      ItemsSource="{Binding CommandDefinition.Items}">
                                        <buttons:SplitButton.SelectedIndex>
                                            <Binding Path="SelectedIndex" Mode="TwoWay"/>
                                        </buttons:SplitButton.SelectedIndex>
                                    </buttons:SplitButton>
                                </ItemsControl.Items>
                                <Control.Template>
                                    <ControlTemplate TargetType="{x:Type Menu}">
                                        <ContentPresenter>
                                            <ContentPresenter.Content>
                                                <Binding Path="Items[0]" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            </ContentPresenter.Content>
                                        </ContentPresenter>
                                    </ControlTemplate>
                                </Control.Template>
                            </Menu>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static menu:Menu.MenuStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="extensions:MenuBehavior.UpdateCommandUiItems" Value="True" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Header">
            <Setter.Value>
                <Binding Path="Text" Mode="OneWay" Converter="{StaticResource AccessKeyConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Path="IsVisible" Converter="{StaticResource BoolToVisConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment">
            <Setter.Value>
                <Binding Path="HorizontalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}"/>
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment">
            <Setter.Value>
                <Binding Path="VerticalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}"/>
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey  TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=TopLevelHeaderTemplateKey}}"/>
        <Setter Property="Padding" Value="6,0,0,1"/>
        <Setter Property="IsEnabled">
            <Setter.Value>
                <Binding Path="IsEnabled"/>
            </Setter.Value>
        </Setter>
        <Setter Property="IsSubmenuOpen" Value="{Binding AreChildItemsDisplayed, Mode=TwoWay}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}"/>
        <Style.Triggers>
            <DataTrigger Value="true">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource IsCustomMenuConverter}"/>
                </DataTrigger.Binding>
                <Setter Property="menu:MenuItem.IsUserCreatedMenu">
                    <Setter.Value>
                        <Binding Path="IsCustom"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
                <Setter Property="Control.Padding" Value="2,0,2,3"/>
                <Setter Property="Control.Template" Value="{DynamicResource {ComponentResourceKey  TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.Role" Value="SubmenuItem"/>
                    <Condition Property="menu:MenuItem.IsUserCreatedMenu" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Control.Padding" Value="2,0,2,3"/>
                <Setter Property="Control.Template" Value="{DynamicResource {ComponentResourceKey  TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=SubmenuHeaderTemplateKey}}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsEnabled" Value="false"/>
                    <Condition Property="menu:MenuItem.IsUserCreatedMenu" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="FrameworkElement.ToolTip"
                        Value="Adding child items to this menu will enable it"/>
                <Setter Property="ToolTipService.ShowOnDisabled" Value="true"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static menu:Menu.ComboBoxStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Path="IsVisible" Converter="{StaticResource BoolToVisConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="CommandDefinition.ShortcutText"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource ComboTemplate}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}"/>
    </Style>
    <Style x:Key="{x:Static menu:Menu.MenuControllerStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="ShortcutText" Mode="OneWay"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Path="IsVisible" Converter="{StaticResource BoolToVisConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Menu FocusManager.IsFocusScope="False" Style="{StaticResource ToolBarMenuStyle}">
                        <AutomationProperties.Name>
                            <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
                        </AutomationProperties.Name>
                        <ItemsControl.Items>
                            <menu:MenuController ToolTipService.ShowOnDisabled="True" ItemsSource="{Binding CommandDefinition.Items}"
                                                 IsEnabled="{Binding IsEnabled}" AnchorItem="{Binding AnchorItem, Mode=TwoWay}">
                                <FrameworkElement.ToolTip>
                                    <MultiBinding Converter="{StaticResource MultiToolTipMultiConverter}">
                                        <Binding Mode="OneWay" Path="CommandDefinition.ToolTip" Converter="{StaticResource AccessKeyRemovingConverter}"/>
                                        <Binding Mode="OneWay" Path="AnchorItem.CommandDefinition.ToolTip" Converter="{StaticResource AccessKeyRemovingConverter}"/>
                                        <Binding Mode="OneWay" Path="AnchorItem.CommandDefinition.ShortcutText"/>
                                    </MultiBinding>
                                </FrameworkElement.ToolTip>
                            </menu:MenuController>
                        </ItemsControl.Items>
                        <Control.Template>
                            <ControlTemplate TargetType="{x:Type Menu}">
                                <ItemsPresenter VerticalAlignment="Center"/>
                            </ControlTemplate>
                        </Control.Template>
                    </Menu>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static menu:MenuItem.MenuControllerStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="ShortcutText" Mode="OneWay"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Path="IsVisible" Converter="{StaticResource BoolToVisConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Header">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Icon">
            <Setter.Value>
               <Binding Path="Icon"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type menu:MenuItem}">
                    <menu:MenuController Header="{TemplateBinding Header}"
                                         Icon="{TemplateBinding Icon}" ItemsSource="{Binding CommandDefinition.Items}"
                                         IsEnabled="{Binding IsEnabled}" AnchorItem="{Binding AnchorItem, Mode=TwoWay}"
                                         Template="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=SubmenuHeaderTemplateKey}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static menu:MenuItem.MenuStyleKey}" TargetType="{x:Type menu:MenuItem}"
           BasedOn="{StaticResource {x:Static menu:Menu.MenuStyleKey}}">
        <Setter Property="extensions:MenuBehavior.UpdateCommandUiItems" Value="True" />
    </Style>
    <Style x:Key="{x:Static menu:MenuItem.SeparatorStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid SnapsToDevicePixels="True" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="26" SharedSizeGroup="MenuItemIconColumnGroup"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Rectangle Height="1" Margin="4,1,1,1" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuSeparator}}"
                                   Grid.Column="1"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static menu:MenuItem.ButtonStyleKey}" x:Uid="Style_9" TargetType="{x:Type menu:MenuItem}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.MenuStyleKey}}">
        <Setter Property="extensions:MenuBehavior.UpdateCommandUiItems" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="CommandDefinition.ShortcutText" Mode="OneWay"/>
            </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground"
                Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}"/>
        <Setter Property="Header">
            <Setter.Value>
                <Binding Path="Text" Mode="OneWay" Converter="{StaticResource AccessKeyConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="InputGestureText">
            <Setter.Value>
                <Binding Path="CommandDefinition.ShortcutText" Mode="OneWay"/>
            </Setter.Value>
        </Setter>
        <Setter Property="IsChecked" Value="{Binding IsChecked}"/>
        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=SubmenuItemTemplateKey}}"/>
        <Setter Property="Padding" Value="2,3,2,3"/>
        <Setter Property="Command">
            <Setter.Value>
                <Binding Converter="{StaticResource CommandBarItemCommandConverter}"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource IsSplitButtonModelConverter}"/>
                </DataTrigger.Binding>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type menu:MenuItem}">
                            <buttons:SplitButton x:Name="PART_FocusTarget" Template="{StaticResource SplitButtonOnMenuTemplate}"
                                              Icon="{TemplateBinding Icon}">
                                <MenuItem.IsSubmenuOpen>
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="IsSubmenuOpen" Mode="TwoWay"/>
                                </MenuItem.IsSubmenuOpen>
                                <ItemsControl.ItemsSource>
                                    <Binding Path="CommandDefinition.Items"/>
                                </ItemsControl.ItemsSource>
                                <HeaderedItemsControl.Header>
                                    <Binding Path="Text" Mode="OneWay" Converter="{StaticResource AccessKeyConverter}"/>
                                </HeaderedItemsControl.Header>
                                <buttons:SplitButton.SelectedIndex>
                                    <Binding Path="SelectedIndex" Mode="TwoWay"/>
                                </buttons:SplitButton.SelectedIndex>
                            </buttons:SplitButton>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static menu:MenuItem.ComboBoxStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Header">
            <Setter.Value>
                <Binding Path="Text" Mode="OneWay" Converter="{StaticResource AccessKeyConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="IsEnabled">
            <Setter.Value>
                <Binding Path="IsEnabled"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Path="IsVisible" Converter="{StaticResource BoolToVisConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="StaysOpenOnClick" Value="true"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type menu:MenuItem}">
                    <Grid SnapsToDevicePixels="True" Background="Transparent" MaxWidth="{x:Static menu:MenuItem.MaxMenuWidth}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="26" SharedSizeGroup="MenuItemIconColumnGroup"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition MinWidth="90" Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Rectangle x:Name="Bg" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0" Grid.ColumnSpan="3"/>
                        <ContentPresenter Grid.Column="0" x:Name="Icon" Margin="2,1,4,1" Width="16" Height="16" VerticalAlignment="Center" ContentSource="Icon"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <ContentPresenter Grid.Column="1" ContentSource="Header" Margin="8,1,0,1" VerticalAlignment="Center" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <comboBox:ComboBox x:Name="PART_FocusTarget" Margin="7,2,2,2" Grid.Column="2" TextSearch.TextPath="Text"
                                       IsEnabled="{TemplateBinding IsEnabled}" ShouldPreserveUserEnteredPrefix="True"
                                       IsEmbeddedInMenu="true" 
                                       IsEditable="{Binding VisualSource.IsEditable}" DataSource="{Binding DataSource}" VisualDataSource="{Binding VisualSource}">
                            <ItemsControl.ItemsSource>
                                <Binding Path="DataSource.Items"/>
                            </ItemsControl.ItemsSource>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock>
                                        <TextBlock.Text>
                                            <Binding Path="Text"/>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </comboBox:ComboBox>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="MenuItem.Icon">
                            <Trigger.Value>
                                <x:NullExtension/>
                            </Trigger.Value>
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                            <Setter TargetName="Bg"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOver}}"
                                    Property="Shape.Fill"/>
                            <Setter TargetName="Bg"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverBorder}}"
                                    Property="Shape.Stroke"/>
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverText}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}"
                                    Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style x:Key="HorizontalToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Cursor" Value="SizeAll" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="8"/>
        <Setter Property="Padding" Value="2,3,1,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent" Padding="2,3,1,3" SnapsToDevicePixels="True">
                        <Rectangle Stretch="Fill" SnapsToDevicePixels="True">
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile" Viewbox="0,0,5,4" ViewboxUnits="Absolute" 
                                              Viewport="0,0,5,4" ViewportUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <GeometryDrawing Brush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarDragHandle}}">
                                            <GeometryDrawing.Geometry>
                                                <GeometryGroup FillRule="EvenOdd">
                                                    <RectangleGeometry Rect="0,0,1,1" RadiusX="0" RadiusY="0"/>
                                                    <RectangleGeometry Rect="4,0,1,1" RadiusX="0" RadiusY="0"/>
                                                    <RectangleGeometry Rect="2,2,1,1" RadiusX="0" RadiusY="0"/>
                                                </GeometryGroup>
                                            </GeometryDrawing.Geometry>
                                        </GeometryDrawing>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Cursor" Value="SizeAll" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Height" Value="8"/>
        <Setter Property="Padding" Value="3,2,3,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="Transparent" SnapsToDevicePixels="True">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush ViewportUnits="Absolute" ViewboxUnits="Absolute" Viewport="0,0,4,5" Viewbox="0,0,4,5" TileMode="Tile">
                                    <DrawingBrush.Drawing>
                                        <GeometryDrawing Brush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarDragHandle}}">
                                            <GeometryDrawing.Geometry>
                                                <GeometryGroup>
                                                    <GeometryGroup.Children>
                                                        <RectangleGeometry Rect="0,0,1,1" />
                                                        <RectangleGeometry Rect="0,4,1,1" />
                                                        <RectangleGeometry Rect="2,2,1,1" />
                                                    </GeometryGroup.Children>
                                                </GeometryGroup>
                                            </GeometryDrawing.Geometry>
                                        </GeometryDrawing>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsBackground}}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" 
                            TextElement.Foreground="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsGlyph}}">
                        <Grid Margin="7,0,2,0">
                            <Grid x:Name="Overflow" Width="6" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,4,0,0">
                                <Path Stretch="Fill" HorizontalAlignment="Left" VerticalAlignment="Center" Width="2" Height="4" Grid.Row="0"
                                      Data="M 0,0 L 2,2 0,4 Z">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Path>
                                <Path Stretch="Fill" HorizontalAlignment="Right" VerticalAlignment="Center" Width="2"
                                      Height="4" Grid.Row="0" Data="M 0,0 L 2,2 0,4 Z">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Path>
                            </Grid>
                            <Grid x:Name="Options" Width="6" Height="6" HorizontalAlignment="Center" VerticalAlignment="Bottom"
                                  Margin="0,0,0,4">
                                <Rectangle VerticalAlignment="Top" Width="Auto" Height="1">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Rectangle>
                                <Path Stretch="Fill" Margin="0,3,0,0" Data="M 0,0 L 6,0 3,3 Z" VerticalAlignment="Top"
                                      Width="6" Height="3">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Path>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="HasOverflowItems">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type this:ToolBar}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter Property="Visibility" Value="Hidden" TargetName="Overflow"/>
                        </DataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="IsQuickCustomizeEnabled">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type this:ToolBar}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Options" Property="UIElement.Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverBackgroundBegin}}"></Setter>
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverGlyph}}"></Setter>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverBackgroundBegin}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseDownGlyph}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverBackgroundBegin}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverGlyph}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsBackground}}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd" x:Uid="Border_10" Background="{TemplateBinding Control.Background}"
                            TextElement.Foreground="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsGlyph}}">
                        <Grid Margin="0,7,0,2">
                            <Grid x:Name="Overflow" Width="Auto" Height="6" HorizontalAlignment="Left"
                                  VerticalAlignment="Center" Margin="4,0,0,0">
                                <Path Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Top" Width="4"
                                      Height="2" Grid.Row="0" Data="M 0,0 L 4,0 2,2 Z">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Path>
                                <Path Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Bottom" Width="4"
                                      Height="2" Grid.Row="0" Data="M 0,0 L 4,0 2,2 Z">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Path>
                            </Grid>
                            <Grid x:Name="Options" Width="6" Height="6" HorizontalAlignment="Right"
                                  VerticalAlignment="Center" Margin="0,0,4,0">
                                <Rectangle VerticalAlignment="Stretch" HorizontalAlignment="Left" Width="1" Height="Auto">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Rectangle>
                                <Path Stretch="Fill" Data="M 0,0 L 0,6 3,3 Z" VerticalAlignment="Center"
                                      HorizontalAlignment="Right" Width="3" Height="6">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Path>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="HasOverflowItems">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type this:ToolBar}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Overflow" Property="UIElement.Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="IsQuickCustomizeEnabled">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type this:ToolBar}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Options" Property="UIElement.Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverBackgroundBegin}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverGlyph}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverBackgroundBegin}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverGlyph}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverBackgroundBegin}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverGlyph}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type this:ToolBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Style.Resources>
            <ResourceDictionary Source="QuickCustomizeButton.xaml"/>
        </Style.Resources>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarGradientBegin}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarToolBarBorder}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="imaging:ImageThemingUtilities.ImageBackgroundColor">
            <Setter.Value>
                <Binding Path="Background" RelativeSource="{RelativeSource Self}"
                         Converter="{StaticResource BrushToColorConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Band">
            <Setter.Value>
                <Binding Path="BandIndex" Mode="TwoWay"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type this:ToolBar}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                            <internals:ToolBarOverflowToggleButton x:Name="OverflowButton" Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}"
                                                                   ClickMode="Press" InputMethod.IsInputMethodSuspended="true"
                                                                   ToolTip="{Binding Path=Text, ConverterParameter=ToolBarToolTipText, Converter={StaticResource CommandBarFormattedStringConverter}}">
                                <UIElement.Visibility>
                                    <TemplateBindingExtension Property="this:ToolBar.IsOverflowToggleButtonVisible" Converter="{StaticResource BoolToVisConverter}"/>
                                </UIElement.Visibility>
                                <ToggleButton.IsChecked>
                                    <Binding Path="IsOverflowOpen" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </ToggleButton.IsChecked>
                            </internals:ToolBarOverflowToggleButton>
                            <internals:ToolBarOverflowPopup x:Name="OverflowPopup" AllowsTransparency="True" Placement="Bottom" 
                                                            StaysOpen="False" Focusable="False">
                                <Popup.IsOpen>
                                    <Binding Path="IsOverflowOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </Popup.IsOpen>
                                <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                                    <Border Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBackgroundGradientBegin}}" 
                                            BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBorder}}" 
                                            BorderThickness="1" 
                                            RenderOptions.BitmapScalingMode="{x:Static native:DpiHelper.BitmapScalingMode}" RenderOptions.ClearTypeHint="Enabled">
                                        <StackPanel Orientation="Vertical" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle">
                                            <internals:ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2" WrapWidth="200"
                                                                            HorizontalAlignment="Left" Focusable="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                            Visibility="{TemplateBinding HasOverflowItems, Converter={StaticResource BoolToVisConverter}}">
                                                <FrameworkElement.FocusVisualStyle>
                                                    <x:NullExtension/>
                                                </FrameworkElement.FocusVisualStyle>
                                            </internals:ToolBarOverflowPanel>
                                            <StackPanel Orientation="Vertical"
                                                        Visibility="{TemplateBinding IsQuickCustomizeEnabled, Converter={StaticResource BoolToVisConverter}}">
                                                <this:Separator Margin="2,2,2,0"
                                                                Visibility="{TemplateBinding HasOverflowItems, Converter={StaticResource BoolToVisConverter}}"/>
                                                <internals:DummyParentMenuItem>
                                                    <internals:QuickCustomizeButton Header="{x:Static commandBar:CommandBarResources.ToolBarQuickCustomizeText}" 
                                                                                    this:ToolBar.IsToolBarHostedMenuItem="true"
                                                                                    QuickCustomizeDataSource="{Binding Path=Items, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                                                                    DataContext="{TemplateBinding this:ToolBar.DataContext}"/>
                                                </internals:DummyParentMenuItem>
                                            </StackPanel>
                                        </StackPanel>
                                    </Border>
                                </windows:SystemDropShadowChrome>
                            </internals:ToolBarOverflowPopup>
                        </Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition x:Name="ShifterColumn" Width="10"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition x:Name="ShifterRow" Height="10"/>
                            </Grid.RowDefinitions>
                            <Border x:Name="MainPanelBorder" Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}">
                                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                    <Thumb x:Name="ToolBarThumb" Style="{StaticResource HorizontalToolBarThumbStyle}"/>
                                    <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center"
                                                      VerticalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    <internals:ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                            IsStretching="{TemplateBinding this:ToolBar.IsStretching}"/>
                                </DockPanel>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" Path="AreAnimationsAllowed"/>
                            </DataTrigger.Binding>
                            <Setter TargetName="OverflowPopup" Property="Popup.PopupAnimation" Value="None"/>
                        </DataTrigger>
                        <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false"/>
                        </Trigger>
                        <Trigger Property="HeaderedItemsControl.Header">
                            <Trigger.Value>
                                <x:NullExtension/>
                            </Trigger.Value>
                            <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding ElementName="OverflowPopup" Path="(Popup.HasDropShadow)"/>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" Path="AreGradientsAllowed"/>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="SnapsToDevicePixels" Value="True"/>
                            <Setter TargetName="Shdw" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" Property="windows:SystemDropShadowChrome.Color"/>
                        </MultiDataTrigger>
                        <Trigger Property="ToolBar.Orientation" Value="Vertical">
                            <Setter TargetName="OverflowButton"
                                    Value="{StaticResource ToolBarVerticalOverflowButtonStyle}" Property="FrameworkElement.Style"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Height" Value="8"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Width" Value="Auto"/>
                            <Setter TargetName="ToolBarThumb" Property="Control.Padding" Value="3,2,3,1"/>
                            <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="ToolBarThumb" Value="{StaticResource VerticalToolBarThumbStyle}" Property="FrameworkElement.Style"/>
                            <Setter TargetName="ToolBarHeader" Property="FrameworkElement.Margin" Value="0,0,0,4"/>
                            <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="PART_ToolBarPanel" Property="FrameworkElement.Margin" Value="1,0,2,2"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="OverflowPopup" Property="Popup.Placement" Value="Right"/>
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarGradientBegin}}"
                                    Property="Control.Background"/>
                            <Setter Property="FrameworkElement.MinWidth" Value="24"/>
                            <Setter Property="FrameworkElement.MinHeight" Value="0"/>
                        </Trigger>
                        <Trigger Property="ToolBar.Orientation" Value="Horizontal">
                            <Setter Property="FrameworkElement.MinWidth" Value="0"/>
                            <Setter Property="FrameworkElement.MinHeight" Value="24"/>
                        </Trigger>
                        <Trigger Property="ToolBar.Orientation" Value="Horizontal">
                            <Setter TargetName="ShifterRow" Property="RowDefinition.Height" Value="0"/>
                        </Trigger>
                        <Trigger Property="ToolBar.Orientation" Value="Vertical">
                            <Setter TargetName="ShifterColumn" Property="ColumnDefinition.Width" Value="0"/>
                        </Trigger>
                        <DataTrigger Value="Collapsed">
                            <DataTrigger.Binding>
                                <Binding ElementName="OverflowButton" Path="Visibility"/>
                            </DataTrigger.Binding>
                            <Setter TargetName="ShifterRow" Property="RowDefinition.Height" Value="0"/>
                            <Setter TargetName="ShifterColumn" Property="ColumnDefinition.Width" Value="0"/>
                        </DataTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarButtonBaseStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="CommandDefinition.ShortcutText" Mode="OneWay"/>
            </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ToolTip">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource ToolTipMultiConverter}">
                    <Binding Mode="OneWay" Path="CommandDefinition.ToolTip" Converter="{StaticResource AccessKeyRemovingConverter}"/>
                    <Binding Mode="OneWay" Path="CommandDefinition.ShortcutText"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTipService.ShowOnDisabled" Value="true"/>
        <Setter Property="ToggleButton.IsChecked">
            <Setter.Value>
                <Binding Mode="OneWay" Path="IsChecked"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Border" BorderThickness="1" Background="Transparent"
                            BorderBrush="Transparent">
                        <Grid x:Name="ContainingGrid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Image" Margin="2" Grid.Column="0" HorizontalAlignment="Center"
                                              VerticalAlignment="Center" Visibility="Collapsed" RecognizesAccessKey="True"/>
                            <AccessText x:Name="Text" Margin="2,0,7,0" Grid.Column="1" VerticalAlignment="Center"
                                        HorizontalAlignment="Center" Visibility="Collapsed" Text="{Binding Text, Converter={StaticResource AccessKeyConverter}}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True" Binding="{Binding Flags.Pict}">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Flags.Pict}" Value="False"/>
                                <Condition Binding="{Binding Flags.TextOnly}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                        <DataTrigger Value="True" Binding="{Binding Flags.TextOnly}">
                            <Setter TargetName="Text" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Value="{x:Null}" Binding="{Binding Icon, RelativeSource={RelativeSource Self}}">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Text" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="Visible">
                                    <Condition.Binding>
                                        <Binding ElementName="Text" Path="Visibility"/>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="Vertical">
                                    <Condition.Binding>
                                        <Binding Path="ParentToolBar.Orientation" RelativeSource="{RelativeSource Self}"/>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="False">
                                    <Condition.Binding>
                                        <Binding RelativeSource="{RelativeSource Self}" Path="(ToolBar.IsOverflowItem)"/>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ContainingGrid" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Image" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Text" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" 
                                    Property="AccessText.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}"
                                    Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}"
                                    Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                                <Condition Property="UIElement.IsEnabled" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelectedBorder}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelected}}"
                                    Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextSelected}}"
                                    Property="TextElement.Foreground"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}"
                                    Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextMouseDown}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <MultiTrigger x:Uid="MultiTrigger_1">
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                                <Condition Property="UIElement.IsEnabled" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIconBorder}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIcon}}"
                                    Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHoverOverSelected}}"
                                    Property="TextElement.Foreground"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static this:ToolBar.SeparatorStyleKey}" TargetType="{x:Type buttons:CommandDefinitionButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel x:Name="HostingStackPanel" SnapsToDevicePixels="True" Margin="3,2,3,2">
                        <Rectangle x:Name="SeparatorRectangle" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarToolBarSeparator}}"/>
                        <Rectangle x:Name="SeparatorRectangle2" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarToolBarSeparatorHighlight}}"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="Horizontal">
                            <DataTrigger.Binding>
                                <Binding RelativeSource="{RelativeSource Self}" Path="ParentToolBar.Orientation"/>
                            </DataTrigger.Binding>
                            <Setter TargetName="SeparatorRectangle" Property="FrameworkElement.Width" Value="1"/>
                            <Setter TargetName="SeparatorRectangle2" Property="FrameworkElement.Width" Value="1"/>
                            <Setter TargetName="HostingStackPanel" Property="StackPanel.Orientation"
                                    Value="Horizontal"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="Vertical">
                                    <Condition.Binding>
                                        <Binding RelativeSource="{RelativeSource Self}" Path="ParentToolBar.Orientation"/>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="False">
                                    <Condition.Binding>
                                        <Binding RelativeSource="{RelativeSource Self}" Path="(ToolBar.IsOverflowItem)"/>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="SeparatorRectangle" Property="FrameworkElement.Height" Value="1"/>
                            <Setter TargetName="SeparatorRectangle2" Property="FrameworkElement.Height" Value="1"/>
                            <Setter TargetName="HostingStackPanel" Property="StackPanel.Orientation" Value="Vertical"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="Vertical">
                                    <Condition.Binding>
                                        <Binding RelativeSource="{RelativeSource Self}" Path="ParentToolBar.Orientation"/>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding RelativeSource="{RelativeSource Self}" Path="(ToolBar.IsOverflowItem)"/>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="SeparatorRectangle" Property="FrameworkElement.Width" Value="1"/>
                            <Setter TargetName="SeparatorRectangle2" Property="FrameworkElement.Width" Value="1"/>
                            <Setter TargetName="HostingStackPanel" Property="StackPanel.Orientation" Value="Horizontal"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static this:ToolBar.ButtonStyleKey}" BasedOn="{StaticResource ToolBarButtonBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Path="IsVisible" Converter="{StaticResource BoolToVisConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="InputMethod.IsInputMethodSuspended" Value="true"/>
        <Style.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource NotNullConverter}"/>
                </DataTrigger.Binding>
                <Setter Property="ButtonBase.Command">
                    <Setter.Value>
                        <Binding Converter="{StaticResource CommandBarItemCommandConverter}"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource IsSplitButtonModelConverter}"/>
                </DataTrigger.Binding>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Menu FocusManager.IsFocusScope="False" Style="{StaticResource ToolBarMenuStyle}">
                                <AutomationProperties.Name>
                                    <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
                                </AutomationProperties.Name>
                                <ItemsControl.Items>
                                    <buttons:SplitButton x:Name="PART_FocusTarget" Icon="{TemplateBinding Content}" ItemsSource="{Binding CommandDefinition.Items}">
                                        <buttons:SplitButton.SelectedIndex>
                                            <Binding Path="SelectedIndex" Mode="TwoWay"/>
                                        </buttons:SplitButton.SelectedIndex>
                                    </buttons:SplitButton>
                                </ItemsControl.Items>
                                <Control.Template>
                                    <ControlTemplate TargetType="{x:Type Menu}">
                                        <ContentPresenter>
                                            <ContentPresenter.Content>
                                                <Binding Path="Items[0]" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            </ContentPresenter.Content>
                                        </ContentPresenter>
                                    </ControlTemplate>
                                </Control.Template>
                            </Menu>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static this:ToolBar.ComboBoxStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="IsEnabled" Value="{Binding IsEnabled, Mode=TwoWay}"/>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Path="IsVisible" Converter="{StaticResource BoolToVisConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="ShortcutText"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource ComboTemplate}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Converter="{StaticResource IsComboBoxModelConverter}"/>
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="Vertical">
                        <Condition.Binding>
                            <Binding Path="ParentToolBar.Orientation" RelativeSource="{RelativeSource Self}"/>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static this:ToolBar.MenuStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="KeyboardNavigation.IsTabStop" Value="false"/>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Path="IsVisible" Converter="{StaticResource BoolToVisConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Menu FocusManager.IsFocusScope="False" Style="{StaticResource ToolBarMenuStyle}">
                        <AutomationProperties.Name>
                            <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
                        </AutomationProperties.Name>
                        <FrameworkElement.Resources>
                            <Style TargetType="{x:Type menu:MenuItem}" BasedOn="{StaticResource {x:Static menu:Menu.MenuStyleKey}}"
                                   x:Key="{x:Static menu:Menu.MenuStyleKey}">
                                <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
                                <Setter Property="Padding" Value="2,1,1,0"/>
                                <Setter Property="IsPlacedOnToolBar" Value="true"/>
                            </Style>
                        </FrameworkElement.Resources>
                        <ItemsControl.Items>
                            <menu:MenuItem x:Name="PART_FocusTarget" Style="{DynamicResource {x:Static menu:Menu.MenuStyleKey}}"/>
                        </ItemsControl.Items>
                        <Control.Template>
                            <ControlTemplate TargetType="{x:Type Menu}">
                                <ItemsPresenter Name="ItemsPresenter"/>
                            </ControlTemplate>
                        </Control.Template>
                    </Menu>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static this:ToolBar.MenuControllerStyleKey}">
        <Setter Property="Panel.Background" Value="Transparent"/>
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
        <Setter Property="UIElement.IsEnabled">
            <Setter.Value>
                <Binding Path="IsEnabled"/>
            </Setter.Value>
        </Setter>
        <Setter Property="UIElement.Visibility">
            <Setter.Value>
                <Binding Path="IsVisible" Converter="{StaticResource BoolToVisConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="ShortcutText" Mode="OneWay"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Menu FocusManager.IsFocusScope="False" Style="{StaticResource ToolBarMenuStyle}">
                        <AutomationProperties.Name>
                            <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
                        </AutomationProperties.Name>
                        <ItemsControl.Items>
                            <menu:MenuController x:Name="PART_FocusTarget" ToolTipService.ShowOnDisabled="True" this:ToolBar.IsToolBarHostedMenuItem="true"
                                                 ItemsSource="{Binding CommandDefinition.Items}" AnchorItem="{Binding AnchorItem, Mode=TwoWay}">
                                <FrameworkElement.ToolTip>
                                    <MultiBinding Converter="{StaticResource MultiToolTipMultiConverter}">
                                        <Binding Mode="OneWay" Path="CommandDefinition.ToolTip" Converter="{StaticResource AccessKeyRemovingConverter}"/>
                                        <Binding Mode="OneWay" Path="AnchorItem.CommandDefinition.ToolTip" Converter="{StaticResource AccessKeyRemovingConverter}"/>
                                        <Binding Mode="OneWay" Path="AnchorItem.CommandDefinition.ShortcutText"/>
                                    </MultiBinding>
                                </FrameworkElement.ToolTip>
                            </menu:MenuController>
                        </ItemsControl.Items>
                        <Control.Template>
                            <ControlTemplate TargetType="{x:Type Menu}">
                                <ItemsPresenter VerticalAlignment="Center"/>
                            </ControlTemplate>
                        </Control.Template>
                    </Menu>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type buttons:CommandDefinitionButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Value="true">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource IsNotSeparatorModelConverter}"/>
                </DataTrigger.Binding>
                <Setter Property="utilities1:DteFocusHelper.AcquireFocus" Value="{Binding AcquireFocus}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type menu:MenuControllerButton}"
           BasedOn="{StaticResource {x:Static this:ToolBar.ButtonStyleKey}}">
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type menu:MenuControllerButton}">
                    <Grid x:Name="ContainingGrid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                          Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter x:Name="Image" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Margin="2" Grid.Column="0"
                                          Content="{Binding Path=Icon, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type menu:MenuController}}}"/>
                        <AccessText x:Name="Text" Margin="2" Grid.Column="1" VerticalAlignment="Center"
                                    HorizontalAlignment="Center" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="IsEnabled">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type menu:MenuController}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>

                        </DataTrigger>
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <Binding Path="DataContext.Flags.PictAndText">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type menu:MenuController}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Text" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger>
                            <DataTrigger.Binding>
                                <Binding RelativeSource="{RelativeSource Self}" Path="Content" Mode="OneWay"/>
                            </DataTrigger.Binding>
                            <DataTrigger.Value>
                                <x:NullExtension/>
                            </DataTrigger.Value>
                            <Setter TargetName="Text" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="DataContext.Flags.TextIsAnchor">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type menu:MenuController}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Text" Property="AccessText.Text">
                                <Setter.Value>
                                    <Binding Path="DataContext.Text" Converter="{StaticResource AccessKeyConverter}">
                                        <Binding.RelativeSource>
                                            <RelativeSource Mode="FindAncestor" AncestorType="{x:Type menu:MenuController}"/>
                                        </Binding.RelativeSource>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <Binding Path="DataContext.Flags.TextIsAnchor">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type menu:MenuController}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Text" Property="AccessText.Text">
                                <Setter.Value>
                                    <Binding Path="AnchorItem.Text" Converter="{StaticResource AccessKeyConverter}">
                                        <Binding.RelativeSource>
                                            <RelativeSource Mode="FindAncestor" AncestorType="{x:Type menu:MenuController}"/>
                                        </Binding.RelativeSource>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="IsEnabled">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type menu:MenuController}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Text"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}"
                                    Property="TextElement.Foreground"/>
                        </DataTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Text" Value="{DynamicResource {x:Static colors:EnvironmentColors.ButtonForegroundDisabled}}" Property="AccessText.Foreground"/>
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="Vertical">
                                    <Condition.Binding>
                                        <Binding RelativeSource="{RelativeSource Self}" Path="ParentToolBar.Orientation"/>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="False">
                                    <Condition.Binding>
                                        <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type menu:MenuController}}" Path="HostContainer.(ToolBar.IsOverflowItem)"/>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ContainingGrid" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Image" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="ContainingGrid"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}"
                                    Property="Panel.Background"/>
                            <Setter TargetName="Text"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextMouseDown}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type menu:MenuController}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsSubmenuOpen" Value="{Binding AreChildItemsDisplayed, Mode=TwoWay}"/>
        <Setter Property="utilities1:DteFocusHelper.AcquireFocus" Value="{Binding AcquireFocus}"/>
        <Setter Property="IsChecked">
            <Setter.Value>
                <Binding Path="IsChecked" Mode="OneWay"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="CommandDefinition.ShortcutText"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type menu:MenuController}">
                    <Border x:Name="NonCheckedBorder" BorderThickness="1" BorderBrush="Transparent"
                            Background="{TemplateBinding Background}">
                        <Grid SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="3" Placement="Bottom" Margin="1" 
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" IsOpen="{TemplateBinding IsSubmenuOpen}">
                                <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                                    <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuIconBackground}}">
                                        <menu:MenuScrollViewer>
                                            <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBackgroundGradientBegin}}">
                                                <imaging:ImageThemingUtilities.ImageBackgroundColor>
                                                    <Binding Path="Background" ElementName="IconBackground" Converter="{StaticResource BrushToColorConverter}"/>
                                                </imaging:ImageThemingUtilities.ImageBackgroundColor>
                                                <Border x:Name="IconBackground" Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuIconBackground}}"
                                                        HorizontalAlignment="Left"/>
                                                <ItemsPresenter Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                Grid.IsSharedSizeScope="True"/>
                                            </Grid>
                                        </menu:MenuScrollViewer>
                                        <Border BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBorder}}"
                                                BorderThickness="1"/>
                                    </Grid>
                                </windows:SystemDropShadowChrome>
                            </Popup>
                            <Border x:Name="CheckedBorder" BorderThickness="1" BorderBrush="Transparent" Grid.Column="0" Background="{TemplateBinding Background}">
                                <menu:MenuControllerButton x:Name="MenuControllerButton" DataContext="{TemplateBinding AnchorItem}"
                                                               IsEnabled="{TemplateBinding IsEnabled}"
                                                               ToolTip="{TemplateBinding ToolTip}" HorizontalAlignment="Stretch"
                                                               VerticalAlignment="Stretch"/>
                            </Border>
                            <Rectangle x:Name="SeparatorLine" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonSeparator}}"
                                       Visibility="Hidden" Width="1" VerticalAlignment="Stretch" Grid.Column="1"/>
                            <Grid x:Name="ArrowGrid" Width="10" Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Path x:Name="Arrow" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonGlyph}}"
                                      Data="{StaticResource DownArrowGeometry}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsEnabled" Value="true"/>
                                <Condition Property="MenuItem.IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelectedBorder}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="CheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelected}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="MenuControllerButton"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextSelected}}"
                                    Property="TextElement.Foreground"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsEnabled" Value="true"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="MenuItem.IsChecked" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="NonCheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="NonCheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="SeparatorLine" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="MenuControllerButton"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}"
                                    Property="TextElement.Foreground"/>
                            <Setter TargetName="Arrow"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseOverGlyph}}"
                                    Property="Shape.Fill"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsEnabled" Value="true"/>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="MenuItem.IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIconBorder}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="CheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIcon}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="MenuControllerButton"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}"
                                    Property="TextElement.Foreground"/>
                            <Setter TargetName="Arrow"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseOverGlyph}}"
                                    Property="Shape.Fill"/>
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}"
                                    Property="TextElement.Foreground"/>
                            <Setter TargetName="Arrow"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}"
                                    Property="Shape.Fill"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
                                <Condition Property="MenuItem.IsChecked" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="NonCheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="NonCheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="SeparatorLine" Property="UIElement.Visibility" Value="Visible"/>
                            <Setter TargetName="MenuControllerButton"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}"
                                    Property="TextElement.Foreground"/>
                            <Setter TargetName="Arrow"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseOverGlyph}}"
                                    Property="Shape.Fill"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
                                <Condition Property="MenuItem.IsChecked" Value="false"/>
                                <Condition SourceName="MenuControllerButton" Property="ButtonBase.IsPressed"
                                           Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}"
                                    Property="Border.BorderBrush"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true"/>
                                <Condition Property="MenuItem.IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIconBorder}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="CheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIcon}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="MenuControllerButton"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}"
                                    Property="TextElement.Foreground"/>
                            <Setter TargetName="Arrow"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseOverGlyph}}"
                                    Property="Shape.Fill"/>
                        </MultiTrigger>
                        <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                            <Setter TargetName="SeparatorLine" Property="UIElement.Visibility" Value="Hidden"/>
                            <Setter TargetName="NonCheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="CheckedBorder"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="MenuControllerButton"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextMouseDown}}"
                                    Property="TextElement.Foreground"/>
                            <Setter TargetName="Arrow"
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseDownGlyph}}"
                                    Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding ElementName="PART_Popup" Path="(Popup.HasDropShadow)"/>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" Path="AreGradientsAllowed"/>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" Property="windows:SystemDropShadowChrome.Color"/>
                        </MultiDataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" Path="AreAnimationsAllowed"/>
                            </DataTrigger.Binding>
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SplitButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ToolBarButtonBaseStyle}">
        <Setter Property="Command">
            <Setter.Value>
                <Binding Converter="{StaticResource CommandBarItemCommandConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="ContainingGrid" Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Margin="2,2,4,2"></ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ContainingGrid" Property="Background" 
                                    Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type buttons:SplitButtonItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Mode="OneTime" Path="Text"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Content">
            <Setter.Value>
                <Binding Path="Text" Mode="OneTime"/>
            </Setter.Value>
        </Setter>
        <Setter Property="IsSelected">
            <Setter.Value>
                <Binding RelativeSource="{RelativeSource Self}" Path="IsHighlighted"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:NullExtension}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type buttons:SplitButtonItem}" x:Key="{x:Type buttons:SplitButtonItem}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="buttons:SplitButtonItem.IsHighlighted" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}"/>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type buttons:SplitButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="ShortcutText"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type buttons:SplitButton}">
                    <Border x:Name="Border" BorderThickness="1" BorderBrush="Transparent"
                            Background="{TemplateBinding Background}">
                        <Grid SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="3" Placement="Bottom"
                                   Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                   IsOpen="{TemplateBinding IsSubmenuOpen}" MinWidth="155" MaxHeight="210">
                                <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                                    <Border BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.DropDownPopupBorder}}"
                                            BorderThickness="1">
                                        <Grid SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <ScrollViewer x:Name="PART_ScrollViewer" Grid.Row="0" VerticalScrollBarVisibility="Auto">
                                                <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.DropDownPopupBackgroundBegin}}">
                                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" Margin="3"
                                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.IsSharedSizeScope="True"/>
                                                </Grid>
                                            </ScrollViewer>
                                            <StatusBar HorizontalAlignment="Stretch" Grid.Row="1"
                                                       Background="{DynamicResource {x:Static colors:EnvironmentColors.SystemWindow}}"
                                                       Foreground="{DynamicResource {x:Static colors:EnvironmentColors.SystemGrayText}}">
                                                <StatusBarItem HorizontalAlignment="Center">
                                                    <TextBlock Text="{Binding StatusString}"/>
                                                </StatusBarItem>
                                            </StatusBar>
                                        </Grid>
                                    </Border>
                                </windows:SystemDropShadowChrome>
                            </Popup>
                            <Button Grid.Column="0" 
                                    Content="{TemplateBinding Icon}" Focusable="False" Style="{StaticResource SplitButtonStyle}"
                                    IsEnabled="{TemplateBinding IsEnabled}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            <Rectangle x:Name="SeparatorLine" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonSeparator}}"
                                       Visibility="Hidden" Width="1" VerticalAlignment="Stretch" Grid.Column="1"/>
                            <Grid Background="Transparent" Margin="2,0,2,0" Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Path x:Name="Arrow" Margin="0,1,0,0" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonGlyph}}"
                                      Data="{StaticResource DownArrowGeometry}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}"/>
                            <Setter TargetName="SeparatorLine" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseOverGlyph}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}"/>
                            <Setter TargetName="SeparatorLine" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseOverGlyph}}"/>
                        </Trigger>
                        <Trigger Property="IsSubmenuOpen" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}"/>
                            <Setter TargetName="SeparatorLine" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseDownGlyph}}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding ElementName="PART_Popup" Path="(Popup.HasDropShadow)"/>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" Path="AreGradientsAllowed"/>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" Property="windows:SystemDropShadowChrome.Color"/>
                        </MultiDataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" Path="AreAnimationsAllowed"/>
                            </DataTrigger.Binding>
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static menu:MenuController.ButtonStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.ButtonStyleKey}}"
           TargetType="{x:Type menu:MenuItem}"/>
    <Style x:Key="{x:Static menu:MenuController.MenuControllerStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.MenuControllerStyleKey}}"
           TargetType="{x:Type menu:MenuItem}"/>
    <Style x:Key="{x:Static menu:MenuController.MenuStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.MenuStyleKey}}"
           TargetType="{x:Type menu:MenuItem}"/>
    <Style x:Key="{x:Static menu:MenuController.SeparatorStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.SeparatorStyleKey}}"
           TargetType="{x:Type menu:MenuItem}"/>
    <Style x:Key="{x:Static menu:MenuController.ComboBoxStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.ComboBoxStyleKey}}"
           TargetType="{x:Type menu:MenuItem}"/>
    <Style x:Key="{x:Static menu:ContextMenu.ButtonStyleKey}" BasedOn="{StaticResource {x:Static menu:MenuItem.ButtonStyleKey}}"
           TargetType="{x:Type menu:MenuItem}"/>
        <Style x:Key="{x:Static menu:ContextMenu.MenuStyleKey}" BasedOn="{StaticResource {x:Static menu:MenuItem.MenuStyleKey}}"
           TargetType="{x:Type menu:MenuItem}"/>
    <Style x:Key="{x:Static menu:ContextMenu.SeparatorStyleKey}" BasedOn="{StaticResource {x:Static menu:MenuItem.SeparatorStyleKey}}"
           TargetType="{x:Type menu:MenuItem}"/>
    <Style x:Key="{x:Static menu:ContextMenu.ComboBoxStyleKey}" BasedOn="{StaticResource {x:Static menu:MenuItem.ComboBoxStyleKey}}"
           TargetType="{x:Type menu:MenuItem}"/>
</ResourceDictionary>