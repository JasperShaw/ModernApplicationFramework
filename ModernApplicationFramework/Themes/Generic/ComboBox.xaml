<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:this="clr-namespace:ModernApplicationFramework.Controls"
                    xmlns:colors="clr-namespace:ModernApplicationFramework.Core.Themes"
                    xmlns:utilities="clr-namespace:ModernApplicationFramework.Core.Utilities"
                    xmlns:accessKey="clr-namespace:ModernApplicationFramework.Core.Converters.AccessKey"
                    xmlns:customize="clr-namespace:ModernApplicationFramework.Core.Converters.Customize"
                    xmlns:converters="clr-namespace:ModernApplicationFramework.Core.Converters"
                    xmlns:general="clr-namespace:ModernApplicationFramework.Core.Converters.General"
                    xmlns:windows="clr-namespace:ModernApplicationFramework.Controls.Windows"
                    xmlns:comboBox="clr-namespace:ModernApplicationFramework.Controls.ComboBox">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Brushes.xaml"/>
        <ResourceDictionary Source="ComboBoxItem.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Geometry x:Key="DownArrowGeometry">M 0 0 L 3 3 L 6 0 Z</Geometry>

    <accessKey:AccessKeyRemovingConverter x:Key="AccessKeyRemovingConverter"/>
    <accessKey:AccessKeyConverter x:Key="AccessKeyConverter"/>
    <customize:IsCustomMenuConverter x:Key="IsCustomMenuConverter"/>
    <converters:BrushToColorConverter x:Key="BrushToColorConverter"/>
    <general:NotNullConverter x:Key="NotNullConverter"/>
    <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
    <converters:ComboBoxWidthConverter x:Key="ComboBoxWidthConverter"/>
    <converters:ToolTipMultiConverter x:Key="ToolTipMultiConverter"/>

    <!--<ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border x:Name="Border" Grid.ColumnSpan="2" Background="{DynamicResource {x:Static colors:EnvironmentColors.ComboboxButtonBackground}}" 
                    BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxBorder}}" BorderThickness="1"/>
            <Border x:Name="ButtonBorder" Grid.Column="0" Margin="1" Background="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxBackground}}" 
                    BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonBorder}}" BorderThickness="0,0,1,0" />
            <Path x:Name="Arrow" Grid.Column="1" Fill="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxArrow}}" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 3 3 6 0 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboboxButtonBackgroundHover}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxBorderHover}}"/>
                <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonBorderHover}}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxArrowHover}}"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboboxButtonBackgroundDown}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxBorderDown}}"/>
                <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonBorderDown}}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxArrowDown}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboboxButtonBackgroundDisabled}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxBorderDisabled}}"/>
                <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonBorderDisabled}}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxArrowDisabled}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>-->

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
    </ControlTemplate>

    <!--<Style TargetType="{x:Type this:ComboBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxForeground}}"/>
		<Setter Property="MinWidth" Value="50"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}"/>
        <Setter Property="Template">
			<Setter.Value>
                <ControlTemplate TargetType="{x:Type this:ComboBox}">
                    <Grid>
                        <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="None">
                            <this:SystemDropShadowChrome x:Name="Shadow" AllowDrop="True" Color="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxPopupShadowBackground}}" Margin="0,0,5,5">
                                <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder" Background="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxPopupBackground}}" BorderThickness="1"
                                            BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxPopupBorder}}"/>
                                    <this:ScrollViewer Margin="4,2,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </this:ScrollViewer>
                                </Grid>
                            </this:SystemDropShadowChrome>   
                        </Popup>
                        <ToggleButton Name="ToggleButton" Template="{StaticResource ComboBoxToggleButton}" Focusable="false"
                                      IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" 
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
										      VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,3,25,3"/>
                        <TextBox x:Name="PART_EditableTextBox" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" HorizontalAlignment="Left" VerticalAlignment="Center" 
                                 Margin="3,3,23,3" Focusable="False" Background="Transparent" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" Foreground="{TemplateBinding Foreground}"
                                 SelectionBrush="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxSelectionBrush}}" 
                                 CaretBrush="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxCaretBrush}}"/>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="25"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="ContentSite" Property="Focusable" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxForegroundDisabled}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

    <Style x:Key="DropDownToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent">
                        <Border x:Name="Border" Width="13" HorizontalAlignment="Right"
                                Background="{TemplateBinding Background}" BorderThickness="1,0,0,0"
                                BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True">
                            <Path x:Name="Arrow" Margin="0,1,0,0" Fill="{TemplateBinding Foreground}"
                                  Data="{StaticResource DownArrowGeometry}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseDownBackground}}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseDownSeparator}}"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseDownGlyph}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseDownBackground}}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseDownSeparator}}"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseDownGlyph}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent">
                        <Border x:Name="Border" Width="13" HorizontalAlignment="Right"
                                Background="{TemplateBinding Background}" BorderThickness="1,0,0,0"
                                BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True">
                            <Path x:Name="Arrow" Margin="0,1,0,0" Fill="{TemplateBinding TextElement.Foreground}"
                                  Data="{StaticResource DownArrowGeometry}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonMouseDownBackground}}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonMouseDownSeparator}}"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseDownGlyph}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonMouseDownBackground}}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonMouseDownSeparator}}"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseDownGlyph}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Focusable="False"
                                  HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                  Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type comboBox:ComboBox}">
        <Border x:Name="Border" BorderThickness="1" BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxBorder}}"
                Background="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxBackground}}">
            <Grid Name="Placement" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" AllowsTransparency="True" Placement="Bottom"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Popup.IsOpen>
                        <Binding Path="IsDropDownOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
                    </Popup.IsOpen>
                    <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <windows:SystemDropShadowChrome.MinWidth>
                            <Binding ElementName="Placement" Path="ActualWidth"/>
                        </windows:SystemDropShadowChrome.MinWidth>
                        <Border x:Name="DropDownBorder" BorderThickness="1"
                                BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxPopupBorder}}">
                            <ScrollViewer>
                                <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxPopupBackgroundBegin}}">
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                    KeyboardNavigation.DirectionalNavigation="Contained"></ItemsPresenter>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </windows:SystemDropShadowChrome>
                </Popup>
                <TextBox x:Name="PART_EditableTextBox" Grid.Column="0" Margin="0"
                         Foreground="{TemplateBinding Foreground}" SelectionBrush="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxSelection}}"
                         VerticalAlignment="Center" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                         Style="{StaticResource ComboBoxEditableTextBox}"
                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                    <TextBox.CaretBrush>
                        <Binding RelativeSource="{RelativeSource Self}" Path="Foreground"/>
                    </TextBox.CaretBrush>
                    <TextBox.IsReadOnly>
                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="IsReadOnly"/>
                    </TextBox.IsReadOnly>
                </TextBox>
                <ToggleButton x:Name="ToggleButton" Grid.Column="1" Background="Transparent" BorderBrush="Transparent"
                              Foreground="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxGlyph}}"
                              Style="{StaticResource ComboBoxToggleButton}">
                    <ToggleButton.IsChecked>
                        <Binding Path="IsDropDownOpen" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                    </ToggleButton.IsChecked>
                </ToggleButton>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxFocusedButtonSeparator}}"/>
                <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxFocusedButtonBackground}}"/>
                <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxFocusedGlyph}}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxFocusedBackground}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxFocusedBorder}}"/>
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxFocusedText}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonMouseOverSeparator}}"/>
                <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonMouseOverBackground}}"/>
                <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseOverGlyph}}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseOverBackgroundBegin}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseOverBorder}}"/>
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseOverText}}"/>
            </Trigger>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseDownBackground}}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseDownBorder}}"/>
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseDownText}}"/>
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="DropDownBorder" Property="FrameworkElement.Height" Value="95"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="ToggleButton" Property="BorderBrush" Value="Transparent"/>
                <Setter TargetName="ToggleButton" Property="Background" Value="Transparent"/>
                <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxDisabledGlyph}}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxDisabledBackground}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxDisabledBorder}}"/>
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxDisabledText}}"/>
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <DataTrigger Binding="{Binding ElementName=PART_Popup, Path=(Popup.HasDropShadow)}" Value="True">
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                <Setter TargetName="Shdw" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}"
                        Property="windows:SystemDropShadowChrome.Color"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="ComboBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="4,4,21,4" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type comboBox:ComboBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="utilities:DteFocusHelper.AcquireFocus" Value="{Binding AcquireFocus}"/>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="DisplayedItem">
            <Setter.Value>
                <Binding Mode="TwoWay" Path="DataSource.DisplayedItem"/>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownText}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="3,0,3,0"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type comboBox:ComboBoxItem}">
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxItemText}}"/>
                    <Setter Property="AutomationProperties.Name" Value="{Binding Text}"/>
                    <Setter Property="AutomationProperties.AutomationId" Value="{Binding Text}"/>
                    <Setter Property="Template" Value="{StaticResource ComboBoxItemTemplate}"/>
                    <Setter Property="Margin" Value="2,0,2,0"/>
                    <Setter Property="InputMethod.IsInputMethodSuspended" Value="true"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type comboBox:ComboBox}">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.DropDownBorder}}"
                            Background="{DynamicResource {x:Static colors:EnvironmentColors.DropDownBackground}}">
                        <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition MinWidth="12" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" Placement="Bottom"
                                   Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                <Popup.IsOpen>
                                    <Binding Path="IsDropDownOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </Popup.IsOpen>
                                <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <FrameworkElement.MinWidth>
                                        <Binding ElementName="MainGrid" Path="ActualWidth"/>
                                    </FrameworkElement.MinWidth>
                                    <Border x:Name="DropDownBorder" BorderThickness="1" BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.DropDownPopupBorder}}">
                                        <ScrollViewer>
                                            <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.DropDownPopupBackgroundBegin}}">
                                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                KeyboardNavigation.DirectionalNavigation="Contained"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </windows:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton x:Name="ToggleButton" Grid.Column="0" Grid.ColumnSpan="2" Background="Transparent"
                                          BorderBrush="Transparent" Foreground="{DynamicResource {x:Static colors:EnvironmentColors.DropDownGlyph}}"
                                          Style="{StaticResource DropDownToggleButton}">
                                <ToggleButton.IsChecked>
                                    <Binding Path="IsDropDownOpen" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </ToggleButton.IsChecked>
                            </ToggleButton>
                            <ContentPresenter Grid.Column="0" IsHitTestVisible="false"
                                              Margin="{TemplateBinding Control.Padding}" Content="{TemplateBinding DisplayedItem}"
                                              ContentTemplate="{TemplateBinding ItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseOverSeparator}}"/>
                            <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseOverBackground}}"/>
                            <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverGlyph}}"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverBackgroundBegin}}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverBorder}}"/>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverText}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseOverSeparator}}"/>
                            <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseOverBackground}}"/>
                            <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverGlyph}}"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverBackgroundBegin}}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverBorder}}"/>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverText}}"/>
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseDownBackground}}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseDownBorder}}"/>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseDownText}}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="FrameworkElement.Height" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ToggleButton" Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="ToggleButton" Property="Background" Value="Transparent"/>
                            <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownDisabledGlyph}}"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownDisabledBorder}}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownDisabledBackground}}"/>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownDisabledText}}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding ElementName=PART_Popup, Path=(Popup.HasDropShadow)}" Value="True">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}"
                                    Property="windows:SystemDropShadowChrome.Color"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ComboBox.IsEditable" Value="true">
                <Setter Property="Control.IsTabStop" Value="false"/>
                <Setter Property="Control.Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                <Setter Property="TextElement.Foreground"
                        Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxText}}"/>
                <Setter Property="ComboBox.Text" Value="{Binding DisplayedText, Mode=TwoWay}"/>
                <Setter Property="Control.Padding" Value="0"/>
            </Trigger>
            <Trigger Property="ComboBox.IsEditable" Value="false">
                <Setter Property="InputMethod.IsInputMethodSuspended" Value="true"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="ComboTemplate">
        <Grid Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <comboBox:ComboBoxLabel x:Name="Label" Grid.Column="0" VerticalAlignment="Center" Margin="3,0,3,0"
                                Visibility="Collapsed" IsTabStop="False">
                <comboBox:ComboBoxLabel.TargetComboBox>
                    <Binding ElementName="PART_FocusTarget"/>
                </comboBox:ComboBoxLabel.TargetComboBox>
                <Control.Template>
                    <ControlTemplate>
                        <AccessText Name="LabelText" Text="{Binding Text, Converter={StaticResource AccessKeyConverter}}"/>
                    </ControlTemplate>
                </Control.Template>
            </comboBox:ComboBoxLabel>
            <comboBox:ComboBox x:Name="PART_FocusTarget" Margin="3,1,3,1" Grid.Column="1" TextSearch.TextPath="Text" IsEditable="{Binding VisualSource.IsEditable}"
                           ShouldPreserveUserEnteredPrefix="True" ToolTipService.ShowOnDisabled="true"
                           VisualDataSource="{Binding VisualSource}" DataSource="{Binding DataSource}">

                <ItemsControl.ItemsSource>
                    <Binding Path="DataSource.Items"/>
                </ItemsControl.ItemsSource>
                <comboBox:ComboBox.IsEmbeddedInMenu>
                    <Binding Mode="OneWay" RelativeSource="{RelativeSource Self}" Path="ParentMenuItem" Converter="{StaticResource NotNullConverter}"/>
                </comboBox:ComboBox.IsEmbeddedInMenu>
                <FrameworkElement.ToolTip>
                    <MultiBinding Converter="{StaticResource ToolTipMultiConverter}">
                        <Binding Path="CommandDefinition.ToolTip" Mode="OneWay"
                                 Converter="{StaticResource AccessKeyRemovingConverter}"/>
                        <Binding Path="CommandDefinition.ShortcutText" Mode="OneWay"/>
                    </MultiBinding>
                </FrameworkElement.ToolTip>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <TextBlock>
                            <TextBlock.Text>
                                <Binding Path="Text"/>
                            </TextBlock.Text>
                        </TextBlock>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </comboBox:ComboBox>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Value="True" Binding="{Binding Flags.PictAndText}">
                <Setter TargetName="Label" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Value="False" Binding="{Binding IsEnabled}">
                <Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}"/>
            </DataTrigger>
            <DataTrigger Value="False" Binding="{Binding VisualSource.Flags.StretchHorizontally}">
                <Setter TargetName="PART_FocusTarget" Property="Width" Value="{Binding Path=VisualSource.DropDownWidth, Mode=TwoWay, Converter={StaticResource ComboBoxWidthConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>