<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:this="clr-namespace:ModernApplicationFramework.Controls"
                    xmlns:themes="clr-namespace:ModernApplicationFramework.Core.Themes"
                    xmlns:internals="clr-namespace:ModernApplicationFramework.Controls.Internals"
                    xmlns:native="clr-namespace:ModernApplicationFramework.Native"
                    xmlns:converters="clr-namespace:ModernApplicationFramework.Core.Converters">
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../../Resources/Icons/StatusError.xaml"></ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
    <converters:AccessKeyRemovingConverter x:Key="AccessKeyRemovingConverter"/>
    <converters:AccessKeyConverter x:Key="AccessKeyConverter"/>
    <converters:ToolTipMultiConverter x:Key="ToolTipMultiConverter"/>
    <converters:NotNullConverter x:Key="NotNullConverter"/>
    <converters:CommandBarItemCommandConverter x:Key="CommandBarItemCommandConverter"/>
    <converters:DockToOrienationConverter x:Key="DockToOrienationConverter"/>
    <converters:BrushToColorConverter x:Key="BrushToColorConverter"/>
    <converters:FormattedStringConverter x:Key="FormattedStringConverter"/>

    <ControlTemplate x:Key="ComboTemplate">
        <Grid Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Button x:Name="Label" Grid.Column="0" VerticalAlignment="Center" Margin="3,0,3,0"
                    Visibility="Visible" IsTabStop="False">
                <Control.Template>
                    <ControlTemplate>
                        <AccessText Name="LabelText"
                                    Text="{Binding Text, Converter={StaticResource AccessKeyConverter}}"/>
                    </ControlTemplate>
                </Control.Template>
            </Button>
            <this:ComboBox x:Name="PART_FocusTarget" Margin="3,1,3,1" Grid.Column="1" TextSearch.TextPath="Text"
                           IsEditable="{Binding IsEditable}">
                <ItemsControl.ItemsSource>
                    <Binding Path="Items"/>
                </ItemsControl.ItemsSource>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <TextBlock>
                            <TextBlock.Text>
                                <Binding Path="Text"/>
                            </TextBlock.Text>
                        </TextBlock>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </this:ComboBox>
        </Grid>
    </ControlTemplate>

    <Style x:Key="HorizontalToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Cursor" Value="SizeAll" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="8"/>
        <Setter Property="Padding" Value="2,3,1,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent" Padding="2,3,1,3" SnapsToDevicePixels="True">
                        <Rectangle Stretch="Fill" SnapsToDevicePixels="True">
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile" Viewbox="0,0,5,4" ViewboxUnits="Absolute" 
                                                Viewport="0,0,5,4" ViewportUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <GeometryDrawing Brush="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarGrip}}">
                                            <GeometryDrawing.Geometry>
                                                <GeometryGroup FillRule="EvenOdd">
                                                    <RectangleGeometry Rect="0,0,1,1" RadiusX="0" RadiusY="0"/>
                                                    <RectangleGeometry Rect="4,0,1,1" RadiusX="0" RadiusY="0"/>
                                                    <RectangleGeometry Rect="2,2,1,1" RadiusX="0" RadiusY="0"/>
                                                </GeometryGroup>
                                            </GeometryDrawing.Geometry>
                                        </GeometryDrawing>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Cursor" Value="SizeAll" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Height" Value="8"/>
        <Setter Property="Padding" Value="3,2,3,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="Transparent" SnapsToDevicePixels="True">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush ViewportUnits="Absolute" ViewboxUnits="Absolute" Viewport="0,0,4,5" Viewbox="0,0,4,5" TileMode="Tile">
                                    <DrawingBrush.Drawing>
                                        <GeometryDrawing Brush="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarGrip}}">
                                            <GeometryDrawing.Geometry>
                                                <GeometryGroup>
                                                    <GeometryGroup.Children>
                                                        <RectangleGeometry Rect="0,0,1,1" />
                                                        <RectangleGeometry Rect="0,4,1,1" />
                                                        <RectangleGeometry Rect="2,2,1,1" />
                                                    </GeometryGroup.Children>
                                                </GeometryGroup>
                                            </GeometryDrawing.Geometry>
                                        </GeometryDrawing>    
                                    </DrawingBrush.Drawing></DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackground}}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" 
                            TextElement.Foreground="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundGlyph}}">
                        <Grid Margin="7,0,2,0">
                            <Grid x:Name="Overflow" Width="6" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,4,0,0">
                                <Path Stretch="Fill" HorizontalAlignment="Left" VerticalAlignment="Center" Width="2" Height="4" Grid.Row="0"
                                      Data="M 0,0 L 2,2 0,4 Z">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Path>
                                <Path Stretch="Fill" HorizontalAlignment="Right" VerticalAlignment="Center" Width="2"
                                      Height="4" Grid.Row="0" Data="M 0,0 L 2,2 0,4 Z">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Path>
                            </Grid>
                            <Grid x:Name="Options" Width="6" Height="6" HorizontalAlignment="Center" VerticalAlignment="Bottom"
                                  Margin="0,0,0,4">
                                <Rectangle VerticalAlignment="Top" Width="Auto" Height="1">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Rectangle>
                                <Path Stretch="Fill" Margin="0,3,0,0" Data="M 0,0 L 6,0 3,3 Z" VerticalAlignment="Top"
                                      Width="6" Height="3">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Path>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="HasOverflowItems">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type this:ToolBar}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter Property="Visibility" Value="Hidden" TargetName="Overflow"/>
                        </DataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="IsQuickCustomizeEnabled">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type this:ToolBar}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Options" Property="UIElement.Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundMouseOver}}"></Setter>
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundGlyphMouseOver}}"></Setter>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundIsChecked}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundGlyphIsChecked}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundFocused}}"
                                    Property="Border.Background"/>
                            <Setter TargetName="Bd"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundGlyphFocused}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackground}}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Uid="ControlTemplate_13" TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd" x:Uid="Border_10" Background="{TemplateBinding Control.Background}"
                            TextElement.Foreground="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundGlyph}}">
                        <Grid x:Uid="Grid_14" Margin="0,7,0,2">
                            <Grid x:Name="Overflow" x:Uid="Grid_15" Width="Auto" Height="6" HorizontalAlignment="Left"
                                  VerticalAlignment="Center" Margin="4,0,0,0">
                                <Path x:Uid="Path_6" Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Top" Width="4"
                                      Height="2" Grid.Row="0" Data="M 0,0 L 4,0 2,2 Z">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Path>
                                <Path x:Uid="Path_7" Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Bottom" Width="4"
                                      Height="2" Grid.Row="0" Data="M 0,0 L 4,0 2,2 Z">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Path>
                            </Grid>
                            <Grid x:Name="Options" x:Uid="Grid_16" Width="6" Height="6" HorizontalAlignment="Right"
                                  VerticalAlignment="Center" Margin="0,0,4,0">
                                <Rectangle x:Uid="Rectangle_9" VerticalAlignment="Stretch" HorizontalAlignment="Left" Width="1" Height="Auto">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Rectangle>
                                <Path x:Uid="Path_8" Stretch="Fill" Data="M 0,0 L 0,6 3,3 Z" VerticalAlignment="Center"
                                      HorizontalAlignment="Right" Width="3" Height="6">
                                    <Shape.Fill>
                                        <Binding Path="(TextElement.Foreground)" ElementName="Bd"/>
                                    </Shape.Fill>
                                </Path>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger x:Uid="DataTrigger_11" Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="HasOverflowItems">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type this:ToolBar}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter x:Uid="Setter_155" TargetName="Overflow" Property="UIElement.Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <DataTrigger x:Uid="DataTrigger_12" Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="IsQuickCustomizeEnabled">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type this:ToolBar}"/>
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter x:Uid="Setter_156" TargetName="Options" Property="UIElement.Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <Trigger x:Uid="Trigger_24" Property="UIElement.IsMouseOver" Value="true">
                            <Setter x:Uid="Setter_157" TargetName="Bd"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundMouseOver}}"
                                    Property="Border.Background"/>
                            <Setter x:Uid="Setter_950" TargetName="Bd"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundGlyphMouseOver}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger x:Uid="Trigger_25" Property="ToggleButton.IsChecked" Value="true">
                            <Setter x:Uid="Setter_158" TargetName="Bd"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundIsChecked}}"
                                    Property="Border.Background"/>
                            <Setter x:Uid="Setter_951" TargetName="Bd"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundGlyphIsChecked}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger x:Uid="Trigger_352" Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter x:Uid="Setter_952" TargetName="Bd"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundFocused}}"
                                    Property="Border.Background"/>
                            <Setter x:Uid="Setter_953" TargetName="Bd"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarButtonBackgroundGlyphFocused}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type this:ToolBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Style.Resources>
            <ResourceDictionary Source="QuickCustomizeButton.xaml"/>
        </Style.Resources>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarBackground}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.ToolBarBorder}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="26"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="themes:ImageThemingUtilities.ImageBackgroundColor">
            <Setter.Value>
                <Binding Path="Background" RelativeSource="{RelativeSource Self}"
                         Converter="{StaticResource BrushToColorConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsSource">
            <Setter.Value>
                <Binding Path="Items"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Band">
            <Setter.Value>
                <Binding Path="BandIndex" Mode="TwoWay"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type this:ToolBar}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                            <internals:ToolBarOverflowToggleButton x:Name="OverflowButton" Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}"
                                          ClickMode="Press" InputMethod.IsInputMethodSuspended="true"
                                                                   ToolTip="{Binding Text, ConverterParameter=VsToolBarToolTipText, Converter={StaticResource FormattedStringConverter}}">
                                <UIElement.Visibility>
                                    <TemplateBindingExtension Property="this:ToolBar.IsOverflowToggleButtonVisible" Converter="{StaticResource BoolToVisConverter}"/>
                                </UIElement.Visibility>
                                <ToggleButton.IsChecked>
                                    <Binding Path="IsOverflowOpen" Mode="TwoWay" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </ToggleButton.IsChecked>
                            </internals:ToolBarOverflowToggleButton>
                            <internals:ToolBarOverflowPopup x:Name="OverflowPopup" AllowsTransparency="True" Placement="Bottom" 
                                                       StaysOpen="False" Focusable="False">
                                <Popup.IsOpen>
                                    <Binding Path="IsOverflowOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </Popup.IsOpen>
                                <this:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                                    <Border Background="{DynamicResource {x:Static themes:EnvironmentColors.ContextMenuBackground}}" BorderBrush="{DynamicResource {x:Static themes:EnvironmentColors.ContextMenuBorder}}" BorderThickness="1" 
                                            RenderOptions.BitmapScalingMode="{x:Static native:DpiHelper.BitmapScalingMode}" RenderOptions.ClearTypeHint="Enabled">
                                        <StackPanel Orientation="Vertical" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle">
                                            <internals:ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2" WrapWidth="200"
                                                                  HorizontalAlignment="Left" Focusable="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                  Visibility="{TemplateBinding HasOverflowItems, Converter={StaticResource BoolToVisConverter}}">
                                                <FrameworkElement.FocusVisualStyle>
                                                    <x:NullExtension/>
                                                </FrameworkElement.FocusVisualStyle>
                                            </internals:ToolBarOverflowPanel>
                                            <StackPanel Orientation="Vertical"
                                                           Visibility="{TemplateBinding IsQuickCustomizeEnabled, Converter={StaticResource BoolToVisConverter}}">
                                                <this:Separator Margin="2,2,2,0"
                                                                Visibility="{TemplateBinding HasOverflowItems, Converter={StaticResource BoolToVisConverter}}"/>
                                                <internals:DummyParentMenuItem>
                                                    <internals:QuickCustomizeButton Header="_Add or Remove Buttons" this:ToolBar.IsToolBarHostedMenuItem="true"
                                                                                    Foreground="{DynamicResource {x:Static themes:EnvironmentColors.MenuItemForeground}}"
                                                                                    QuickCustomizeDataSource="{Binding Path=Items, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                                                                    DataContext="{TemplateBinding this:ToolBar.DataContext}"/>
                                                </internals:DummyParentMenuItem>
                                            </StackPanel>
                                        </StackPanel>
                                    </Border>
                                </this:SystemDropShadowChrome>
                            </internals:ToolBarOverflowPopup>
                        </Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition x:Name="ShifterColumn" Width="10"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition x:Name="ShifterRow" Height="10"/>
                            </Grid.RowDefinitions>
                            <Border x:Name="MainPanelBorder" Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}">
                                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                    <Thumb x:Name="ToolBarThumb" Style="{StaticResource HorizontalToolBarThumbStyle}"/>
                                    <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center"
                                                      VerticalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    <internals:ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </DockPanel>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false"/>
                        </Trigger>
                        <Trigger Property="HeaderedItemsControl.Header">
                            <Trigger.Value>
                                <x:NullExtension/>
                            </Trigger.Value>
                            <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding ElementName="OverflowPopup" Path="(Popup.HasDropShadow)"/>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="true"/>
                            <Setter TargetName="Shdw" Property="this:SystemDropShadowChrome.Color"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ContextMenuShadow}}" />
                        </MultiDataTrigger>
                        <Trigger Property="ToolBar.Orientation" Value="Vertical">
                            <Setter TargetName="OverflowButton"
                                    Value="{StaticResource ToolBarVerticalOverflowButtonStyle}" Property="FrameworkElement.Style"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Height" Value="8"/>
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Width" Value="Auto"/>
                            <Setter TargetName="ToolBarThumb" Property="Control.Padding" Value="3,2,3,1"/>
                            <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="ToolBarThumb" Value="{StaticResource VerticalToolBarThumbStyle}" Property="FrameworkElement.Style"/>
                            <Setter TargetName="ToolBarHeader" Property="FrameworkElement.Margin" Value="0,0,0,4"/>
                            <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="PART_ToolBarPanel" Property="FrameworkElement.Margin" Value="1,0,2,2"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="OverflowPopup" Property="Popup.Placement" Value="Right"/>
                            <Setter Property="FrameworkElement.MinWidth" Value="24"/>
                            <Setter Property="FrameworkElement.MinHeight" Value="0"/>
                            <Setter Property="Height" Value="Auto"/>
                            <Setter Property="Width" Value="27"/>
                        </Trigger>
                        <Trigger Property="ToolBar.Orientation" Value="Horizontal">
                            <Setter Property="FrameworkElement.MinWidth" Value="0"/>
                            <Setter Property="FrameworkElement.MinHeight" Value="24"/>
                        </Trigger>
                        <Trigger Property="ToolBar.Orientation" Value="Horizontal">
                            <Setter TargetName="ShifterRow" Property="RowDefinition.Height" Value="0"/>
                        </Trigger>
                        <Trigger Property="ToolBar.Orientation" Value="Vertical">
                            <Setter TargetName="ShifterColumn" Property="ColumnDefinition.Width" Value="0"/>
                        </Trigger>
                        <DataTrigger Value="Collapsed">
                            <DataTrigger.Binding>
                                <Binding ElementName="OverflowButton" Path="Visibility"/>
                            </DataTrigger.Binding>
                            <Setter TargetName="ShifterRow" Property="RowDefinition.Height" Value="0"/>
                            <Setter TargetName="ShifterColumn" Property="ColumnDefinition.Width" Value="0"/>
                        </DataTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static themes:EnvironmentColors.MenuItemForegroundDisabled}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarButtonBaseStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="CommandDefinition.ShortcutText" Mode="OneWay"/>
            </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonForeground}}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ToolTip">
        <Setter.Value>
            <MultiBinding Converter="{StaticResource ToolTipMultiConverter}">
                <Binding Mode="OneWay" Path="CommandDefinition.ToolTip" Converter="{StaticResource AccessKeyRemovingConverter}"/>
                    <Binding Mode="OneWay" Path="CommandDefinition.ShortcutText"/>
            </MultiBinding>
        </Setter.Value>
        </Setter>
        <Setter Property="ToolTipService.ShowOnDisabled" Value="true"/>
        <Setter Property="ToggleButton.IsChecked">
            <Setter.Value>
                <Binding Mode="OneWay" Path="IsChecked"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Border" BorderThickness="1" Background="Transparent"
                            BorderBrush="Transparent">
                        <Grid x:Name="ContainingGrid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Image" Margin="2" Grid.Column="0" HorizontalAlignment="Center"
                                              VerticalAlignment="Center" Visibility="Collapsed" RecognizesAccessKey="True"/>
                            <AccessText x:Name="Text" Margin="2,0,7,0" Grid.Column="1" VerticalAlignment="Center"
                                        HorizontalAlignment="Center" Visibility="Collapsed" Text="{Binding Text, Converter={StaticResource AccessKeyConverter}}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True" Binding="{Binding Flags.Pict}">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Flags.Pict}" Value="False"/>
                                <Condition Binding="{Binding Flags.TextOnly}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                        <DataTrigger Value="True" Binding="{Binding Flags.TextOnly}">
                            <Setter TargetName="Text" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Value="{x:Null}" Binding="{Binding Icon, RelativeSource={RelativeSource Self}}">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Text" Property="UIElement.Visibility" Value="Visible"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="Visible">
                                    <Condition.Binding>
                                        <Binding ElementName="Text" Path="Visibility"/>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="Vertical">
                                    <Condition.Binding>
                                        <Binding Path="ParentToolBar.Orientation" RelativeSource="{RelativeSource Self}"/>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ContainingGrid" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Image" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Text" Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonForegroundDisabled}}" Property="AccessText.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonBorderHover}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonBackgroundHover}}"
                                    Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonForegroundHover}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonBorderHover}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonBackgroundHover}}"
                                    Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonForegroundHover}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                                <Condition Property="UIElement.IsEnabled" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonBorderDown}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonBackgroundDown}}"
                                    Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonForegroundDown}}"
                                    Property="TextElement.Foreground"/>
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonBorderDown}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonBackgroundDown}}"
                                    Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonForegroundDown}}"
                                    Property="TextElement.Foreground"/>
                        </Trigger>
                        <MultiTrigger x:Uid="MultiTrigger_1">
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                                <Condition Property="ToggleButton.IsChecked" Value="true"/>
                                <Condition Property="UIElement.IsEnabled" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonBorderHover}}"
                                    Property="Border.BorderBrush"/>
                            <Setter TargetName="Border"
                                    Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonBackgroundHover}}"
                                    Property="Border.Background"/>
                            <Setter Value="{DynamicResource {x:Static themes:EnvironmentColors.ButtonForegroundHover}}"
                                    Property="TextElement.Foreground"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static this:ToolBar.SeparatorStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel x:Name="HostingStackPanel" SnapsToDevicePixels="True" Margin="3,2,3,2">
                        <Rectangle x:Name="SeparatorRectangle" Fill="{DynamicResource {x:Static themes:EnvironmentColors.MenuSeparator}}"/>
                        <Rectangle x:Name="SeparatorRectangle2" Fill="{DynamicResource {x:Static themes:EnvironmentColors.MenuSeparator}}"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="Horizontal">
                            <DataTrigger.Binding>
                                <Binding RelativeSource="{RelativeSource Self}" Path="ParentToolBar.Orientation"/>
                            </DataTrigger.Binding>
                            <Setter TargetName="SeparatorRectangle" Property="FrameworkElement.Width" Value="1"/>
                            <Setter TargetName="SeparatorRectangle2" Property="FrameworkElement.Width" Value="1"/>
                            <Setter TargetName="HostingStackPanel" Property="StackPanel.Orientation"
                                    Value="Horizontal"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="Vertical">
                                    <Condition.Binding>
                                        <Binding RelativeSource="{RelativeSource Self}" Path="ParentToolBar.Orientation"/>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="False">
                                    <Condition.Binding>
                                        <Binding RelativeSource="{RelativeSource Self}" Path="(ToolBar.IsOverflowItem)"/>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="SeparatorRectangle" Property="FrameworkElement.Height" Value="1"/>
                            <Setter TargetName="SeparatorRectangle2" Property="FrameworkElement.Height" Value="1"/>
                            <Setter TargetName="HostingStackPanel" Property="StackPanel.Orientation" Value="Vertical"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="Vertical">
                                    <Condition.Binding>
                                        <Binding RelativeSource="{RelativeSource Self}" Path="ParentToolBar.Orientation"/>
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding RelativeSource="{RelativeSource Self}" Path="(ToolBar.IsOverflowItem)"/>
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="SeparatorRectangle" Property="FrameworkElement.Width" Value="1"/>
                            <Setter TargetName="SeparatorRectangle2" Property="FrameworkElement.Width" Value="1"/>
                            <Setter TargetName="HostingStackPanel" Property="StackPanel.Orientation" Value="Horizontal"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static this:ToolBar.ButtonStyleKey}" BasedOn="{StaticResource ToolBarButtonBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Path="IsVisible" Converter="{StaticResource BoolToVisConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="InputMethod.IsInputMethodSuspended" Value="true"/>
        <Style.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource NotNullConverter}"/>
                </DataTrigger.Binding>
                <Setter Property="ButtonBase.Command">
                    <Setter.Value>
                        <Binding Converter="{StaticResource CommandBarItemCommandConverter}"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static this:ToolBar.ComboBoxStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Path="IsVisible" Converter="{StaticResource BoolToVisConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Path="Text" Converter="{StaticResource AccessKeyRemovingConverter}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="ShortcutText"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource ComboTemplate}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.ComboBoxForeground}}"/>
    </Style>






</ResourceDictionary>