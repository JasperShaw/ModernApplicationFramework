<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:ModernApplicationFramework.Docking.Converters"
                    xmlns:avalonDockControls="clr-namespace:ModernApplicationFramework.Docking.Controls"
					xmlns:themes="clr-namespace:ModernApplicationFramework.Core.Themes">
    
    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <converters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter"/>
    <converters:AnchorSideToOrientationConverter x:Key="AnchorSideToOrientationConverter"/>
    <converters:AnchorSideToAngleConverter x:Key="AnchorSideToAngleConverter"/>
    <converters:NullToDoNothingConverter x:Key="NullToDoNothingConverter"/>
    <converters:LayoutItemFromLayoutModelConverter x:Key="LayoutItemFromLayoutModelConverter"/>
    <converters:ActivateCommandLayoutItemFromLayoutModelConverter x:Key="ActivateCommandLayoutItemFromLayoutModelConverter"/>

    <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackground}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorder}}"/>
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
        <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
        <Setter Property="Padding" Value="2,0,2,0"/>
        <Setter Property="Margin" Value="-2,0,1,0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemText}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" 
                            Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="Content" ContentSource="Header" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                                              VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0,0,1,0"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Selector.IsSelected" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorderLastActive}}"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackgroundLastActive}}"/>
                            <Setter Property="Panel.ZIndex" Value="1" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive}" Value="True"/>
                                <Condition Binding="{Binding IsLastFocusedDocument}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorderActive}}"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackgroundActive}}"/>
                            <Setter Property="Panel.ZIndex" Value="1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive}" Value="True"/>
                                <Condition Binding="{Binding IsLastFocusedDocument}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorderActive}}"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackgroundActive}}"/>
                            <Setter Property="Panel.ZIndex" Value="1" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive}" Value="False"/>
                                <Condition Binding="{Binding IsLastFocusedDocument}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorderLastActive}}"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackgroundLastActive}}"/>
                            <Setter Property="Panel.ZIndex" Value="1" />
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="IsSelected" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorderHover}}"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackgroundHover}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemTextHover}}"/>
                            <Setter Property="Panel.ZIndex" Value="0" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorderDisabled}}"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackgroundDisabled}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DocumentPaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
        <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlBackgroundLastActive}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!--Following border is required to catch mouse events-->
                        <Border Background="Transparent" Grid.RowSpan="2"/>
						<Grid Panel.ZIndex="1">
							<Grid.ColumnDefinitions>
								<ColumnDefinition/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
                            <avalonDockControls:DocumentPaneTabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" ZIndex="1" Margin="2,0,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1"
							                                         ExpandedTearOffMargin="50"/>
							<avalonDockControls:DropDownButton x:Name="MenuDropDownButton" Focusable="False" 
                                                               VerticalAlignment="Center" Grid.Column="1" Height="14" Width="14" BorderThickness="1"
                                                               Background="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBackground}}" 
															   BorderBrush="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBorder}}">
								<avalonDockControls:DropDownButton.DropDownContextMenu>
									<avalonDockControls:ContextMenuEx ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}">
										<avalonDockControls:ContextMenuEx.ItemContainerStyle>
											<Style TargetType="{x:Type avalonDockControls:MenuItemEx}">
                                                <Setter Property="Header" Value="{Binding}"/>
                                                <Setter Property="HeaderTemplate" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplate}"/>
                                                <Setter Property="HeaderTemplateSelector" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}"/>
												<Setter Property="IconTemplate" Value="{Binding Path=Root.Manager.IconContentTemplate}"/>
                                                <Setter Property="IconTemplateSelector" Value="{Binding Path=Root.Manager.IconContentTemplateSelector}"/>
                                                <Setter Property="Command" Value="{Binding Path=., Converter={StaticResource ActivateCommandLayoutItemFromLayoutModelConverter}}"/>
											</Style>
										</avalonDockControls:ContextMenuEx.ItemContainerStyle>
									</avalonDockControls:ContextMenuEx>
								</avalonDockControls:DropDownButton.DropDownContextMenu>
								<Path x:Name="MenuButtonPath" Height="4" Width="8" Fill="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlGlyph}}" 
									  Data="F1 M 0,0 L 4,4 8,0 0,0 z" Stretch="None"/>
							</avalonDockControls:DropDownButton>
						</Grid>
						<Grid Grid.Column="0" Grid.Row="1">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<Border Background="{TemplateBinding Background}" 
									Padding="0,1,0,0"
									Height="2"/>
							<Border x:Name="ContentPanel" 
                                VerticalAlignment="Stretch" 
                                HorizontalAlignment="Stretch"  
                                BorderBrush="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlBorder}}"
                                BorderThickness="1,0,1,1" Grid.Column="0" Grid.Row="1"
                                KeyboardNavigation.DirectionalNavigation="Contained" 
                                KeyboardNavigation.TabIndex="2" 
                                KeyboardNavigation.TabNavigation="Cycle">
								<ContentPresenter x:Name="PART_SelectedContentHost" 
                                              ContentSource="SelectedContent" Margin="0,1,0,0"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</Border>
						</Grid>                       
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" SourceName="MenuDropDownButton" Value="True">
                            <Setter TargetName="MenuButtonPath" Property="Fill" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlGlyphHover}}"/>
                            <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBackgroundHover}}"/>
                            <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBorderHover}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" SourceName="MenuDropDownButton" Value="True">
                            <Setter TargetName="MenuButtonPath" Property="Fill" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlGlyphDown}}"/>
                            <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBackgroundDown}}"/>
                            <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBorderDown}}"/>
                        </Trigger>
						<Trigger Property="IsPressed" SourceName="MenuDropDownButton" Value="True">
                            <Setter TargetName="MenuButtonPath" Property="Fill" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlGlyphDown}}"/>
                            <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBackgroundDown}}"/>
                            <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBorderDown}}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsLastFocusedDocument}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlBackground}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsLastFocusedDocument}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlBackground}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsLastFocusedDocument}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlBackgroundLastActive}}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Model.ChildrenCount}" Value="0">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="MenuDropDownButton" />
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>             
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{StaticResource TabItemStyle}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentTabItem Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentControl Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
</ResourceDictionary>