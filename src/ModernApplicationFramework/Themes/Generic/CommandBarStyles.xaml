<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:accessKey="clr-namespace:ModernApplicationFramework.Core.Converters.AccessKey"
                    xmlns:basics="clr-namespace:ModernApplicationFramework.Basics"
                    xmlns:buttons="clr-namespace:ModernApplicationFramework.Controls.Buttons"
                    xmlns:colors="clr-namespace:ModernApplicationFramework.Core.Themes"
                    xmlns:comboBox="clr-namespace:ModernApplicationFramework.Controls.ComboBox"
                    xmlns:commandBar="clr-namespace:ModernApplicationFramework.Basics.CommandBar"
                    xmlns:converters="clr-namespace:ModernApplicationFramework.Core.Converters"
                    xmlns:converters1="clr-namespace:ModernApplicationFramework.Utilities.Converters;assembly=ModernApplicationFramework.Utilities"
                    xmlns:converters2="clr-namespace:ModernApplicationFramework.Imaging.Converters;assembly=ModernApplicationFramework.Imaging"
                    xmlns:customize="clr-namespace:ModernApplicationFramework.Core.Converters.Customize"
                    xmlns:extensions="clr-namespace:ModernApplicationFramework.Controls.Extensions"
                    xmlns:general="clr-namespace:ModernApplicationFramework.Core.Converters.General"
                    xmlns:imaging="clr-namespace:ModernApplicationFramework.Imaging;assembly=ModernApplicationFramework.Imaging"
                    xmlns:internals="clr-namespace:ModernApplicationFramework.Controls.Internals"
                    xmlns:menu="clr-namespace:ModernApplicationFramework.Controls.Menu"
                    xmlns:native="clr-namespace:ModernApplicationFramework.Native"
                    xmlns:this="clr-namespace:ModernApplicationFramework.Controls"
                    xmlns:utilities1="clr-namespace:ModernApplicationFramework.Core.Utilities"
                    xmlns:windows="clr-namespace:ModernApplicationFramework.Controls.Windows">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ContextMenu.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Geometry x:Key="DownArrowGeometry">M 0 0 L 3 3 L 6 0 Z</Geometry>
    <Geometry x:Key="Checkmark">F1 M 5,11 L 3,7 L 5,7 L 6,9 L 9,3 L 11,3 L 7,11 L 5,11 Z</Geometry>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>

    <accessKey:AccessKeyRemovingConverter x:Key="AccessKeyRemovingConverter" />
    <converters1:BrushToColorConverter x:Key="BrushToColorConverter" />
    <BooleanToVisibilityConverter x:Key="BoolToVisConverter" />
    <accessKey:AccessKeyConverter x:Key="AccessKeyConverter" />
    <accessKey:AccessKeyUnderliningConverter x:Key="AccessKeyUnderliningConverter" />
    <converters:ToolTipMultiConverter x:Key="ToolTipMultiConverter" />
    <general:NotNullConverter x:Key="NotNullConverter" />
    <converters:CommandBarItemCommandConverter x:Key="CommandBarItemCommandConverter" />
    <converters:DockToOrientationConverter x:Key="DockToOrientationConverter" />
    <converters:CommandBarFormattedStringConverter x:Key="CommandBarFormattedStringConverter" />
    <converters:IsSplitButtonModelConverter x:Key="IsSplitButtonModelConverter" />
    <customize:IsNotSeparatorModelConverter x:Key="IsNotSeparatorModelConverter" />
    <customize:IsComboBoxModelConverter x:Key="IsComboBoxModelConverter" />
    <customize:IsCustomMenuConverter x:Key="IsCustomMenuConverter" />
    <converters:ComboBoxWidthConverter x:Key="ComboBoxWidthConverter" />
    <converters:CommandExecutionToBooleanConverter x:Key="CommandExecutionToBooleanConverter" />
    <converters:MultiToolTipMultiConverter x:Key="MultiToolTipMultiConverter" />
    <converters:DockLocationConverter x:Key="DockLocationConverter" />
    <converters:StringUppercaseConverter x:Key="StringUppercaseConverter" />
    <converters2:MonikerSourceToImageConverter x:Key="MonikerSourceToImageConverter" />
    <converters2:EmptyMonikerToBoolConverter x:Key="EmptyMonikerToBoolConverter" />

    <Style BasedOn="{StaticResource {x:Type Menu}}" TargetType="{x:Type menu:Menu}">
        <Setter Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandShelfHighlight}}" />
        <Setter Property="imaging:ImageThemingUtilities.ImageBackgroundColor">
            <Setter.Value>
                <Binding Converter="{StaticResource BrushToColorConverter}"
                         Path="Background"
                         RelativeSource="{RelativeSource Self}" />
            </Setter.Value>
        </Setter>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle" />
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Converter="{StaticResource BoolToVisConverter}" Path="IsVisible" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarMenuStyle"
           BasedOn="{StaticResource {x:Type Menu}}"
           TargetType="{x:Type Menu}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}" />
        <Setter Property="IsMainMenu" Value="false" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=TopLevelHeaderTemplateKey}" TargetType="{x:Type menu:MenuItem}">
        <Grid x:Name="HostingGrid">
            <Border x:Name="Bg"
                    Margin="0,1,0,1"
                    Padding="{TemplateBinding Control.Padding}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="Transparent"
                    BorderThickness="1">
                <Grid x:Name="ContentGrid"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="ContentPresenter"
                                      Grid.Column="0"
                                      Margin="3,0,6,0"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                        <ContentPresenter.Content>
                            <Binding Path="Header" RelativeSource="{RelativeSource TemplatedParent}" />
                        </ContentPresenter.Content>
                    </ContentPresenter>
                    <Grid Grid.Column="1"
                          Margin="0,0,3,0"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center">
                        <Path x:Name="Arrow"
                              Data="{StaticResource DownArrowGeometry}"
                              Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuGlyph}}"
                              Visibility="{TemplateBinding IsPlacedOnToolBar,
                                                           Converter={StaticResource BoolToVisConverter}}" />
                    </Grid>
                </Grid>
            </Border>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   HorizontalOffset="0"
                   Placement="Bottom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   VerticalOffset="-2">
                <Popup.IsOpen>
                    <Binding Path="IsSubmenuOpen" RelativeSource="{RelativeSource TemplatedParent}" />
                </Popup.IsOpen>
                <windows:SystemDropShadowChrome x:Name="Shdw"
                                                SnapsToDevicePixels="True"
                                                Color="Transparent">
                    <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuIconBackground}}">
                        <menu:MenuScrollViewer>
                            <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBackgroundGradientBegin}}"
                                  RenderOptions.BitmapScalingMode="{x:Static native:DpiHelper.BitmapScalingMode}"
                                  RenderOptions.ClearTypeHint="Enabled">
                                <imaging:ImageThemingUtilities.ImageBackgroundColor>
                                    <Binding Converter="{StaticResource BrushToColorConverter}"
                                             ElementName="IconBackground"
                                             Path="Background" />
                                </imaging:ImageThemingUtilities.ImageBackgroundColor>
                                <Border x:Name="IconBackground"
                                        Width="28"
                                        HorizontalAlignment="Left"
                                        Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuIconBackground}}" />
                                <ItemsPresenter Margin="3"
                                                Grid.IsSharedSizeScope="True"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </Grid>
                        </menu:MenuScrollViewer>
                        <Border BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBorder}}" BorderThickness="1" />
                        <Border Height="2"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Top"
                                Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBackgroundGradientBegin}}">
                            <FrameworkElement.Margin>
                                <extensions:MenuPopupPositionerExtension ElementName="Bg" />
                            </FrameworkElement.Margin>
                        </Border>
                    </Grid>
                </windows:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="Vertical">
                        <Condition.Binding>
                            <Binding Path="ParentToolBar.Orientation" RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="False">
                        <Condition.Binding>
                            <Binding Path="HostContainer.(ToolBar.IsOverflowItem)" RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ContentGrid" Property="FrameworkElement.LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="90" />
                    </Setter.Value>
                </Setter>
                <Setter TargetName="PART_Popup" Property="Popup.VerticalOffset" Value="1" />
                <Setter TargetName="Bg" Property="Border.Padding" Value="0,5,1,1" />
            </MultiDataTrigger>
            <DataTrigger Value="{x:Static Dock.Left}">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource DockLocationConverter}"
                             Path="ParentToolBar.DataContext.Position"
                             RelativeSource="{RelativeSource Self}" />
                </DataTrigger.Binding>
                <Setter TargetName="PART_Popup" Property="Popup.Placement" Value="Right" />
                <Setter TargetName="PART_Popup" Property="Popup.HorizontalOffset" Value="2" />
            </DataTrigger>
            <DataTrigger Value="{x:Static Dock.Right}">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource DockLocationConverter}"
                             Path="ParentToolBar.DataContext.Position"
                             RelativeSource="{RelativeSource Self}" />
                </DataTrigger.Binding>
                <Setter TargetName="PART_Popup" Property="Popup.Placement" Value="Left" />
                <Setter TargetName="PART_Popup" Property="Popup.HorizontalOffset" Value="-2" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="False">
                        <Condition.Binding>
                            <Binding Path="IsPlacedOnToolBar" RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="false">
                        <Condition.Binding>
                            <Binding Path="UseTitleCaseOnMenu" Source="{x:Static basics:EnvironmentGeneralOptions.Instance}" />
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ContentPresenter" Property="Content">
                    <Setter.Value>
                        <Binding Converter="{StaticResource StringUppercaseConverter}"
                                 Path="Header"
                                 RelativeSource="{RelativeSource TemplatedParent}" />
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled}" Value="False" />
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="IsPlacedOnToolBar" RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Arrow" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
            </MultiDataTrigger>

            <Trigger Property="menu:MenuItem.IsPlacedOnToolBar" Value="true">
                <Setter TargetName="ContentPresenter" Property="FrameworkElement.Margin" Value="0,0,3,0" />
            </Trigger>

            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
            </Trigger>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <Binding Path="AreAnimationsAllowed" Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" />
                </DataTrigger.Binding>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding ElementName="PART_Popup" Path="(Popup.HasDropShadow)" />
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="AreGradientsAllowed" Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" />
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="windows:SystemDropShadowChrome.Color" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" />
            </MultiDataTrigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Bg" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}" />
                <Setter TargetName="Bg" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}" />
                <Setter TargetName="Arrow" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuMouseOverGlyph}}" />
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter TargetName="Bg" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBorder}}" />
                <Setter TargetName="Bg" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBackgroundGradientBegin}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuMouseDownGlyph}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=SubmenuHeaderTemplateKey}" TargetType="{x:Type menu:MenuItem}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid MinHeight="22" MaxWidth="{x:Static menu:MenuItem.MaxMenuWidth}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="26" SharedSizeGroup="MenuItemicoColumnGroup" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="37" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                    <ColumnDefinition Width="17" />
                </Grid.ColumnDefinitions>
                <Rectangle x:Name="Bg"
                           Grid.ColumnSpan="6"
                           Fill="Transparent"
                           Stroke="Transparent"
                           StrokeThickness="0" />
                <ContentPresenter x:Name="Icon"
                                  Grid.Column="0"
                                  Width="16"
                                  Height="16"
                                  Margin="2,1,4,1"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                <ContentPresenter Grid.Column="1"
                                  Margin="8,1,0,1"
                                  VerticalAlignment="Center"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                <Path x:Name="Arrow"
                      Grid.Column="4"
                      Margin="4,0,0,0"
                      VerticalAlignment="Center"
                      Data="{StaticResource RightArrow}"
                      Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuSubmenuGlyph}}" />
            </Grid>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="true"
                   Focusable="false"
                   HorizontalOffset="0"
                   Placement="Right"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   VerticalOffset="0">
                <Popup.IsOpen>
                    <Binding Path="IsSubmenuOpen" RelativeSource="{RelativeSource TemplatedParent}" />
                </Popup.IsOpen>
                <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                    <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuIconBackground}}">
                        <menu:MenuScrollViewer>
                            <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBackgroundGradientBegin}}"
                                  RenderOptions.BitmapScalingMode="{x:Static native:DpiHelper.BitmapScalingMode}"
                                  RenderOptions.ClearTypeHint="Enabled">
                                <imaging:ImageThemingUtilities.ImageBackgroundColor>
                                    <Binding Converter="{StaticResource BrushToColorConverter}"
                                             ElementName="IconBackground"
                                             Path="Background" />
                                </imaging:ImageThemingUtilities.ImageBackgroundColor>
                                <Border x:Name="IconBackground"
                                        Width="28"
                                        HorizontalAlignment="Left"
                                        Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuIconBackground}}" />
                                <ItemsPresenter Margin="3"
                                                Grid.IsSharedSizeScope="true"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </Grid>
                        </menu:MenuScrollViewer>
                        <Border BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBorder}}" BorderThickness="1" />
                    </Grid>
                </windows:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
            </Trigger>
            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <Binding Path="AreAnimationsAllowed" Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" />
                </DataTrigger.Binding>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding ElementName="PART_Popup" Path="(Popup.HasDropShadow)" />
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="AreGradientsAllowed" Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" />
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="windows:SystemDropShadowChrome.Color" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Bg" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOver}}" />
                <Setter TargetName="Bg" Property="Stroke" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverBorder}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverText}}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuMouseOverSubmenuGlyph}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=SubmenuItemTemplateKey}" TargetType="{x:Type menu:MenuItem}">
        <Grid MinHeight="22"
              MaxWidth="{x:Static menu:MenuItem.MaxMenuWidth}"
              Background="Transparent"
              SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="26" SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="37" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                <ColumnDefinition Width="17" />
            </Grid.ColumnDefinitions>
            <Rectangle x:Name="Bg"
                       Grid.ColumnSpan="5"
                       Fill="Transparent"
                       Stroke="Transparent"
                       StrokeThickness="0" />
            <Border x:Name="IconBorder"
                    Grid.Column="0"
                    Margin="2,0,2,0"
                    Padding="1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    BorderThickness="1">
                <ContentPresenter x:Name="Icon"
                                  Width="16"
                                  Height="16"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  Visibility="Collapsed" />
            </Border>
            <Border x:Name="GlyphPanel"
                    Grid.Column="0"
                    Width="18"
                    Height="18"
                    Margin="2,0,2,0"
                    Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelectedIcon}}"
                    BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarCheckBox}}"
                    BorderThickness="0"
                    Visibility="Collapsed">
                <Path x:Name="Glyph"
                      Width="16"
                      Height="16"
                      Data="{StaticResource Checkmark}"
                      Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarCheckBox}}"
                      FlowDirection="LeftToRight" />
            </Border>
            <ContentPresenter Grid.Column="1"
                              Margin="8,1,0,1"
                              VerticalAlignment="Center"
                              ContentSource="Header"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <TextBlock Grid.Column="3"
                       Margin="{TemplateBinding Padding}"
                       VerticalAlignment="Center"
                       Text="{TemplateBinding InputGestureText}" />
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Flags.Pict}" Value="False" />
                    <Condition Binding="{Binding Flags.TextOnly}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Visible" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Flags.Pict}" Value="True" />
                    <Condition Binding="{Binding Flags.TextOnly}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Visible" />
            </MultiDataTrigger>
            <Trigger Property="MenuItem.Icon">
                <Trigger.Value>
                    <x:NullExtension />
                </Trigger.Value>
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.Icon">
                        <Condition.Value>
                            <x:NullExtension />
                        </Condition.Value>
                    </Condition>
                    <Condition Property="MenuItem.IsChecked" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
            </MultiTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CommandDefinition.ImageMonikerSource, Converter={StaticResource EmptyMonikerToBoolConverter}}" Value="True" />
                    <Condition Binding="{Binding IsChecked}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Converter="{StaticResource NotNullConverter}"
                                     Path="Icon"
                                     RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="IsChecked" RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="False">
                        <Condition.Binding>
                            <Binding Path="IsHighlighted" RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconBorder" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelected}}" />
                <Setter TargetName="IconBorder" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelectedBorder}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Converter="{StaticResource NotNullConverter}"
                                     Path="Icon"
                                     RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="IsChecked" RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="IsHighlighted" RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconBorder" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIcon}}" />
                <Setter TargetName="IconBorder" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIconBorder}}" />
            </MultiDataTrigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
                <Setter TargetName="Bg" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOver}}" />
                <Setter TargetName="Bg" Property="Shape.Stroke" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverBorder}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverText}}" />
                <Setter TargetName="GlyphPanel" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIcon}}" />
                <Setter TargetName="GlyphPanel" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarCheckBoxMouseOver}}" />
                <Setter TargetName="Glyph" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarCheckBoxMouseOver}}" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
                <Setter TargetName="GlyphPanel" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelectedIconDisabled}}" />
                <Setter TargetName="GlyphPanel" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarCheckBoxDisabled}}" />
                <Setter TargetName="Glyph" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarCheckBoxDisabled}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="SplitButtonOnMenuTemplate" TargetType="{x:Type buttons:SplitButton}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid MinHeight="22" MaxHeight="{x:Static menu:MenuItem.MaxMenuWidth}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="26" SharedSizeGroup="MenuItemColumnGroup" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="37" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                    <ColumnDefinition Width="17" />
                </Grid.ColumnDefinitions>
                <Rectangle x:Name="Bg"
                           Grid.ColumnSpan="6"
                           Fill="Transparent"
                           Stroke="Transparent"
                           StrokeThickness="0" />
                <ContentPresenter x:Name="Icon"
                                  Grid.Column="0"
                                  Width="16"
                                  Height="16"
                                  Margin="2,1,4,1"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <ContentPresenter Grid.Column="1"
                                  Margin="8,1,0,1"
                                  VerticalAlignment="Center"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <Path x:Name="Arrow"
                      Grid.Column="4"
                      Margin="4,0,0,0"
                      VerticalAlignment="Center"
                      Data="{StaticResource RightArrow}"
                      Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuSubmenuGlyph}}" />
            </Grid>
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   HorizontalOffset="0"
                   Placement="Right"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   VerticalOffset="0">
                <Popup.IsOpen>
                    <Binding Path="IsSubmenuOpen" RelativeSource="{RelativeSource TemplatedParent}" />
                </Popup.IsOpen>
                <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                    <Border BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.DropDownPopupBorder}}" BorderThickness="1">
                        <Grid HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch"
                              SnapsToDevicePixels="True">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_ScrollViewer"
                                          Grid.Row="0"
                                          VerticalScrollBarVisibility="Auto">
                                <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.DropDownPopupBackgroundBegin}}">
                                    <ItemsPresenter Margin="3"
                                                    Grid.IsSharedSizeScope="True"
                                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </ScrollViewer>
                            <StatusBar Grid.Row="1"
                                       HorizontalAlignment="Stretch"
                                       Background="{DynamicResource {x:Static colors:EnvironmentColors.SystemWindow}}"
                                       Foreground="{DynamicResource {x:Static colors:EnvironmentColors.SystemGrayText}}">
                                <StatusBarItem HorizontalAlignment="Center">
                                    <TextBlock Text="{Binding StatusString}" />
                                </StatusBarItem>
                            </StatusBar>
                        </Grid>
                    </Border>
                </windows:SystemDropShadowChrome>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
            </Trigger>
            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <Binding Path="AreAnimationsAllowed" Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" />
                </DataTrigger.Binding>
                <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding ElementName="PART_Popup" Path="(Popup.HasDropShadow)" />
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Path="AreGradientsAllowed" Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" />
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="windows:SystemDropShadowChrome.Color" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" />
            </MultiDataTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
                <Setter TargetName="Arrow" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="Bg" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOver}}" />
                <Setter TargetName="Bg" Property="Shape.Stroke" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverBorder}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverText}}" />
                <Setter TargetName="Arrow" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuMouseOverSubmenuGlyph}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboTemplate">
        <Grid Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <comboBox:ComboBoxLabel x:Name="Label"
                                    Grid.Column="0"
                                    Margin="3,0,3,0"
                                    VerticalAlignment="Center"
                                    IsTabStop="False"
                                    Visibility="Collapsed">
                <comboBox:ComboBoxLabel.TargetComboBox>
                    <Binding ElementName="PART_FocusTarget" />
                </comboBox:ComboBoxLabel.TargetComboBox>
                <Control.Template>
                    <ControlTemplate>
                        <AccessText Name="LabelText" Text="{Binding Text, Converter={StaticResource AccessKeyConverter}}" />
                    </ControlTemplate>
                </Control.Template>
            </comboBox:ComboBoxLabel>
            <comboBox:ComboBox x:Name="PART_FocusTarget"
                               Grid.Column="1"
                               Margin="3,1,3,1"
                               IsEditable="{Binding IsEditable}"
                               ShouldPreserveUserEnteredPrefix="True"
                               TextSearch.TextPath="Text"
                               ToolTipService.ShowOnDisabled="true">

                <ItemsControl.ItemsSource>
                    <Binding Path="Items" />
                </ItemsControl.ItemsSource>
                <comboBox:ComboBox.IsEmbeddedInMenu>
                    <Binding Converter="{StaticResource NotNullConverter}"
                             Mode="OneWay"
                             Path="ParentMenuItem"
                             RelativeSource="{RelativeSource Self}" />
                </comboBox:ComboBox.IsEmbeddedInMenu>
                <FrameworkElement.ToolTip>
                    <MultiBinding Converter="{StaticResource ToolTipMultiConverter}">
                        <Binding Converter="{StaticResource AccessKeyRemovingConverter}"
                                 Mode="OneWay"
                                 Path="CommandDefinition.ToolTip" />
                        <Binding Mode="OneWay" Path="CommandDefinition.GestureText" />
                    </MultiBinding>
                </FrameworkElement.ToolTip>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <TextBlock>
                            <TextBlock.Text>
                                <Binding Path="Text" />
                            </TextBlock.Text>
                        </TextBlock>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </comboBox:ComboBox>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Flags.PictAndText}" Value="True">
                <Setter TargetName="Label" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsEnabled}" Value="False">
                <Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Flags.StretchHorizontally}" Value="False">
                <Setter TargetName="PART_FocusTarget" Property="Width" Value="{Binding Path=DropDownWidth, Mode=TwoWay, Converter={StaticResource ComboBoxWidthConverter}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static menu:Menu.SeparatorStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsEnabled" Value="False" />
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Converter="{StaticResource BoolToVisConverter}" Path="IsVisible" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel Margin="2"
                                Orientation="Horizontal"
                                SnapsToDevicePixels="True">
                        <Rectangle Width="1" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarToolBarSeparator}}" />
                        <Rectangle Width="1" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarToolBarSeparatorHighlight}}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static menu:Menu.ButtonStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="extensions:MenuBehavior.UpdateCommandUiItems" Value="True" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Mode="OneWay" Path="CommandDefinition.GestureText" />
            </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}" />
        <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BoolToVisConverter}}" />


        <Setter Property="Icon">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource MonikerSourceToImageConverter}">
                    <Binding Path="CommandDefinition.ImageMonikerSource" />
                    <Binding Path="IsEnabled" />
                </MultiBinding>
            </Setter.Value>
        </Setter>


        <Setter Property="Command">
            <Setter.Value>
                <Binding Converter="{StaticResource CommandBarItemCommandConverter}" />
            </Setter.Value>
        </Setter>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="ToolTip">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}"
                         Mode="OneWay"
                         Path="CommandDefinition.ToolTip" />
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTipService.ShowOnDisabled" Value="true" />
        <Setter Property="IsChecked" Value="{Binding IsChecked}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type menu:MenuItem}">
                    <Border x:Name="Border"
                            Background="Transparent"
                            BorderBrush="Transparent"
                            BorderThickness="1">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Rectangle x:Name="Bg"
                                       Grid.ColumnSpan="2"
                                       Fill="Transparent"
                                       Stroke="Transparent"
                                       StrokeThickness="0" />
                            <ContentPresenter x:Name="Image"
                                              Grid.Column="0"
                                              Margin="2"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Content="{TemplateBinding Icon}"
                                              Visibility="Collapsed" />
                            <AccessText x:Name="Text"
                                        Grid.Column="1"
                                        Margin="2"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Text="{Binding Text, Converter={StaticResource AccessKeyConverter}}"
                                        Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Flags.Pict}" Value="True">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Visible" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Flags.Pict}" Value="False" />
                                <Condition Binding="{Binding Flags.TextOnly}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Visible" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Flags.TextOnly}" Value="True">
                            <Setter TargetName="Text" Property="UIElement.Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding CommandDefinition.ImageMonikerSource, Converter={StaticResource EmptyMonikerToBoolConverter}}" Value="True">
                            <Setter TargetName="Text" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Icon, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Text" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Text" Property="AccessText.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bg" Property="Shape.Stroke" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}" />
                            <Setter TargetName="Bg" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Bg" Property="Shape.Stroke" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}" />
                            <Setter TargetName="Bg" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelectedBorder}}" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelected}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextSelected}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource IsSplitButtonModelConverter}" />
                </DataTrigger.Binding>
                <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type menu:MenuItem}">
                            <Menu FocusManager.IsFocusScope="False" Style="{StaticResource ToolBarMenuStyle}">
                                <AutomationProperties.Name>
                                    <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
                                </AutomationProperties.Name>
                                <ItemsControl.Items>
                                    <buttons:SplitButton x:Name="PART_FocusTarget"
                                                         Icon="{TemplateBinding Icon}"
                                                         ItemsSource="{Binding Items}">
                                        <buttons:SplitButton.SelectedIndex>
                                            <Binding Mode="TwoWay" Path="SelectedIndex" />
                                        </buttons:SplitButton.SelectedIndex>
                                    </buttons:SplitButton>
                                </ItemsControl.Items>
                                <Control.Template>
                                    <ControlTemplate TargetType="{x:Type Menu}">
                                        <ContentPresenter>
                                            <ContentPresenter.Content>
                                                <Binding Path="Items[0]" RelativeSource="{RelativeSource TemplatedParent}" />
                                            </ContentPresenter.Content>
                                        </ContentPresenter>
                                    </ControlTemplate>
                                </Control.Template>
                            </Menu>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static menu:Menu.MenuStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="extensions:MenuBehavior.UpdateCommandUiItems" Value="True" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="Header">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyConverter}"
                         Mode="OneWay"
                         Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Converter="{StaticResource BoolToVisConverter}" Path="IsVisible" />
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsSource">
            <Setter.Value>
                <Binding Path="Items" />
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment">
            <Setter.Value>
                <Binding Path="HorizontalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}" />
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment">
            <Setter.Value>
                <Binding Path="VerticalContentAlignment">
                    <Binding.RelativeSource>
                        <RelativeSource AncestorType="{x:Type ItemsControl}" />
                    </Binding.RelativeSource>
                </Binding>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=TopLevelHeaderTemplateKey}}" />
        <Setter Property="Padding" Value="6,0,0,1" />
        <Setter Property="IsEnabled">
            <Setter.Value>
                <Binding Path="IsEnabled" />
            </Setter.Value>
        </Setter>
        <Setter Property="IsSubmenuOpen" Value="{Binding AreChildItemsDisplayed, Mode=TwoWay}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}" />
        <Style.Triggers>
            <DataTrigger Value="true">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource IsCustomMenuConverter}" />
                </DataTrigger.Binding>
                <Setter Property="menu:MenuItem.IsUserCreatedMenu">
                    <Setter.Value>
                        <Binding Path="IsCustom" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
                <Setter Property="Control.Padding" Value="2,0,2,3" />
                <Setter Property="Control.Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="MenuItem.Role" Value="SubmenuItem" />
                    <Condition Property="menu:MenuItem.IsUserCreatedMenu" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="Control.Padding" Value="2,0,2,0" />
                <Setter Property="Control.Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=SubmenuItemTemplateKey}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsEnabled" Value="false" />
                    <Condition Property="menu:MenuItem.IsUserCreatedMenu" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="FrameworkElement.ToolTip" Value="{x:Static commandBar:CommandBarResources.DisabledCustomMenuTooltip}" />
                <Setter Property="ToolTipService.ShowOnDisabled" Value="true" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static menu:Menu.ComboBoxStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Converter="{StaticResource BoolToVisConverter}" Path="IsVisible" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="CommandDefinition.GestureText" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource ComboTemplate}" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}" />
    </Style>
    <Style x:Key="{x:Static menu:Menu.MenuControllerStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Mode="OneWay" Path="GestureText" />
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Converter="{StaticResource BoolToVisConverter}" Path="IsVisible" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Menu FocusManager.IsFocusScope="False" Style="{StaticResource ToolBarMenuStyle}">
                        <AutomationProperties.Name>
                            <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
                        </AutomationProperties.Name>
                        <ItemsControl.Items>
                            <menu:MenuController AnchorItem="{Binding AnchorItem, Mode=TwoWay}"
                                                 IsEnabled="{Binding IsEnabled}"
                                                 ItemsSource="{Binding Items}"
                                                 ToolTipService.ShowOnDisabled="True">
                                <FrameworkElement.ToolTip>
                                    <MultiBinding Converter="{StaticResource MultiToolTipMultiConverter}">
                                        <Binding Converter="{StaticResource AccessKeyRemovingConverter}"
                                                 Mode="OneWay"
                                                 Path="CommandDefinition.ToolTip" />
                                        <Binding Converter="{StaticResource AccessKeyRemovingConverter}"
                                                 Mode="OneWay"
                                                 Path="AnchorItem.CommandDefinition.ToolTip" />
                                        <Binding Mode="OneWay" Path="AnchorItem.CommandDefinition.GestureText" />
                                    </MultiBinding>
                                </FrameworkElement.ToolTip>
                            </menu:MenuController>
                        </ItemsControl.Items>
                        <Control.Template>
                            <ControlTemplate TargetType="{x:Type Menu}">
                                <ItemsPresenter VerticalAlignment="Center" />
                            </ControlTemplate>
                        </Control.Template>
                    </Menu>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static menu:MenuItem.MenuControllerStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Mode="OneWay" Path="GestureText" />
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Converter="{StaticResource BoolToVisConverter}" Path="IsVisible" />
            </Setter.Value>
        </Setter>
        <Setter Property="Header">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <!--<Setter Property="Icon">
            <Setter.Value>
                <Binding Path="Icon"/>
            </Setter.Value>
        </Setter>-->

        <Setter Property="Icon">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource MonikerSourceToImageConverter}">
                    <Binding Path="AnchorItem.CommandDefinition.ImageMonikerSource" />
                    <Binding Path="IsEnabled" />
                </MultiBinding>
            </Setter.Value>
        </Setter>


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type menu:MenuItem}">
                    <menu:MenuController AnchorItem="{Binding AnchorItem, Mode=TwoWay}"
                                         Header="{TemplateBinding Header}"
                                         Icon="{TemplateBinding Icon}"
                                         IsEnabled="{Binding IsEnabled}"
                                         ItemsSource="{Binding Items}"
                                         Template="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem},
                                                                                          ResourceId=SubmenuHeaderTemplateKey}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static menu:MenuItem.MenuStyleKey}"
           BasedOn="{StaticResource {x:Static menu:Menu.MenuStyleKey}}"
           TargetType="{x:Type menu:MenuItem}">
        <Setter Property="extensions:MenuBehavior.UpdateCommandUiItems" Value="True" />
    </Style>
    <Style x:Key="{x:Static menu:MenuItem.SeparatorStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsEnabled" Value="False" />
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Converter="{StaticResource BoolToVisConverter}" Path="IsVisible" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="26" SharedSizeGroup="MenuItemIconColumnGroup" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Rectangle Grid.Column="1"
                                   Height="1"
                                   Margin="4,1,1,1"
                                   Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuSeparator}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static menu:MenuItem.ButtonStyleKey}"
           x:Uid="Style_9"
           BasedOn="{StaticResource {x:Static menu:MenuItem.MenuStyleKey}}"
           TargetType="{x:Type menu:MenuItem}">
        <Setter Property="extensions:MenuBehavior.UpdateCommandUiItems" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Mode="OneWay" Path="CommandDefinition.GestureText" />
            </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}" />
        <Setter Property="Header">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyConverter}"
                         Mode="OneWay"
                         Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="InputGestureText">
            <Setter.Value>
                <Binding Mode="OneWay" Path="CommandDefinition.GestureText" />
            </Setter.Value>
        </Setter>
        <Setter Property="IsChecked" Value="{Binding IsChecked}" />
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type menu:MenuItem}, ResourceId=SubmenuItemTemplateKey}}" />
        <Setter Property="Padding" Value="2,3,2,3" />


        <Setter Property="Icon">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource MonikerSourceToImageConverter}">
                    <Binding Path="CommandDefinition.ImageMonikerSource" />
                    <Binding Path="IsEnabled" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>


        <Setter Property="Command">
            <Setter.Value>
                <Binding Converter="{StaticResource CommandBarItemCommandConverter}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource IsSplitButtonModelConverter}" />
                </DataTrigger.Binding>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type menu:MenuItem}">
                            <buttons:SplitButton x:Name="PART_FocusTarget"
                                                 Icon="{TemplateBinding Icon}"
                                                 Template="{StaticResource SplitButtonOnMenuTemplate}">
                                <MenuItem.IsSubmenuOpen>
                                    <Binding Mode="TwoWay"
                                             Path="IsSubmenuOpen"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </MenuItem.IsSubmenuOpen>
                                <ItemsControl.ItemsSource>
                                    <Binding Path="Items" />
                                </ItemsControl.ItemsSource>
                                <HeaderedItemsControl.Header>
                                    <Binding Converter="{StaticResource AccessKeyConverter}"
                                             Mode="OneWay"
                                             Path="Text" />
                                </HeaderedItemsControl.Header>
                                <buttons:SplitButton.SelectedIndex>
                                    <Binding Mode="TwoWay" Path="SelectedIndex" />
                                </buttons:SplitButton.SelectedIndex>
                            </buttons:SplitButton>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static menu:MenuItem.ComboBoxStyleKey}" TargetType="{x:Type menu:MenuItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="Header">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyConverter}"
                         Mode="OneWay"
                         Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="IsEnabled">
            <Setter.Value>
                <Binding Path="IsEnabled" />
            </Setter.Value>
        </Setter>
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Converter="{StaticResource BoolToVisConverter}" Path="IsVisible" />
            </Setter.Value>
        </Setter>
        <Setter Property="StaysOpenOnClick" Value="true" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type menu:MenuItem}">
                    <Grid MaxWidth="{x:Static menu:MenuItem.MaxMenuWidth}"
                          Background="Transparent"
                          SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="26" SharedSizeGroup="MenuItemIconColumnGroup" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Rectangle x:Name="Bg"
                                   Grid.ColumnSpan="3"
                                   Stroke="{TemplateBinding BorderBrush}"
                                   StrokeThickness="0" />
                        <ContentPresenter x:Name="Icon"
                                          Grid.Column="0"
                                          Width="16"
                                          Height="16"
                                          Margin="2,1,4,1"
                                          VerticalAlignment="Center"
                                          ContentSource="Icon"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <ContentPresenter Grid.Column="1"
                                          Margin="8,1,0,1"
                                          VerticalAlignment="Center"
                                          ContentSource="Header"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <comboBox:ComboBox x:Name="PART_FocusTarget"
                                           Grid.Column="2"
                                           Margin="7,2,2,2"
                                           IsEditable="{Binding IsEditable}"
                                           IsEmbeddedInMenu="true"
                                           IsEnabled="{TemplateBinding IsEnabled}"
                                           ShouldPreserveUserEnteredPrefix="True"
                                           TextSearch.TextPath="Text">
                            <ItemsControl.ItemsSource>
                                <Binding Path="Items" />
                            </ItemsControl.ItemsSource>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock>
                                        <TextBlock.Text>
                                            <Binding Path="Text" />
                                        </TextBlock.Text>
                                    </TextBlock>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </comboBox:ComboBox>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="MenuItem.Icon">
                            <Trigger.Value>
                                <x:NullExtension />
                            </Trigger.Value>
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="MenuItem.IsHighlighted" Value="true">
                            <Setter TargetName="Bg" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOver}}" />
                            <Setter TargetName="Bg" Property="Shape.Stroke" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverBorder}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuItemMouseOverText}}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="HorizontalToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Cursor" Value="SizeAll" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="8" />
        <Setter Property="Padding" Value="2,3,1,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="2,3,1,3"
                            Background="Transparent"
                            SnapsToDevicePixels="True">
                        <Rectangle SnapsToDevicePixels="True" Stretch="Fill">
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile"
                                              Viewbox="0,0,5,4"
                                              ViewboxUnits="Absolute"
                                              Viewport="0,0,5,4"
                                              ViewportUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <GeometryDrawing Brush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarDragHandle}}">
                                            <GeometryDrawing.Geometry>
                                                <GeometryGroup FillRule="EvenOdd">
                                                    <RectangleGeometry RadiusX="0"
                                                                       RadiusY="0"
                                                                       Rect="0,0,1,1" />
                                                    <RectangleGeometry RadiusX="0"
                                                                       RadiusY="0"
                                                                       Rect="4,0,1,1" />
                                                    <RectangleGeometry RadiusX="0"
                                                                       RadiusY="0"
                                                                       Rect="2,2,1,1" />
                                                </GeometryGroup>
                                            </GeometryDrawing.Geometry>
                                        </GeometryDrawing>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Cursor" Value="SizeAll" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Height" Value="8" />
        <Setter Property="Padding" Value="3,2,3,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="Transparent"
                            SnapsToDevicePixels="True">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile"
                                              Viewbox="0,0,4,5"
                                              ViewboxUnits="Absolute"
                                              Viewport="0,0,4,5"
                                              ViewportUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <GeometryDrawing Brush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarDragHandle}}">
                                            <GeometryDrawing.Geometry>
                                                <GeometryGroup>
                                                    <GeometryGroup.Children>
                                                        <RectangleGeometry Rect="0,0,1,1" />
                                                        <RectangleGeometry Rect="0,4,1,1" />
                                                        <RectangleGeometry Rect="2,2,1,1" />
                                                    </GeometryGroup.Children>
                                                </GeometryGroup>
                                            </GeometryDrawing.Geometry>
                                        </GeometryDrawing>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="SizeAll" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsBackground}}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            TextElement.Foreground="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsGlyph}}">
                        <Grid Margin="7,0,2,0">
                            <Grid x:Name="Overflow"
                                  Width="6"
                                  Margin="0,4,0,0"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Top">
                                <Path Grid.Row="0"
                                      Width="2"
                                      Height="4"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Center"
                                      Data="M 0,0 L 2,2 0,4 Z"
                                      Stretch="Fill">
                                    <Shape.Fill>
                                        <Binding ElementName="Bd" Path="(TextElement.Foreground)" />
                                    </Shape.Fill>
                                </Path>
                                <Path Grid.Row="0"
                                      Width="2"
                                      Height="4"
                                      HorizontalAlignment="Right"
                                      VerticalAlignment="Center"
                                      Data="M 0,0 L 2,2 0,4 Z"
                                      Stretch="Fill">
                                    <Shape.Fill>
                                        <Binding ElementName="Bd" Path="(TextElement.Foreground)" />
                                    </Shape.Fill>
                                </Path>
                            </Grid>
                            <Grid x:Name="Options"
                                  Width="6"
                                  Height="6"
                                  Margin="0,0,0,4"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Bottom">
                                <Rectangle Width="Auto"
                                           Height="1"
                                           VerticalAlignment="Top">
                                    <Shape.Fill>
                                        <Binding ElementName="Bd" Path="(TextElement.Foreground)" />
                                    </Shape.Fill>
                                </Rectangle>
                                <Path Width="6"
                                      Height="3"
                                      Margin="0,3,0,0"
                                      VerticalAlignment="Top"
                                      Data="M 0,0 L 6,0 3,3 Z"
                                      Stretch="Fill">
                                    <Shape.Fill>
                                        <Binding ElementName="Bd" Path="(TextElement.Foreground)" />
                                    </Shape.Fill>
                                </Path>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="HasOverflowItems">
                                    <Binding.RelativeSource>
                                        <RelativeSource AncestorType="{x:Type this:ToolBar}" Mode="FindAncestor" />
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Overflow" Property="Visibility" Value="Hidden" />
                        </DataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="IsQuickCustomizeEnabled">
                                    <Binding.RelativeSource>
                                        <RelativeSource AncestorType="{x:Type this:ToolBar}" Mode="FindAncestor" />
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Options" Property="UIElement.Visibility" Value="Hidden" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverBackgroundBegin}}" />
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverGlyph}}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverBackgroundBegin}}" />
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseDownGlyph}}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverBackgroundBegin}}" />
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverGlyph}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsBackground}}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd"
                            x:Uid="Border_10"
                            Background="{TemplateBinding Control.Background}"
                            TextElement.Foreground="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsGlyph}}">
                        <Grid Margin="0,7,0,2">
                            <Grid x:Name="Overflow"
                                  Width="Auto"
                                  Height="6"
                                  Margin="4,0,0,0"
                                  HorizontalAlignment="Left"
                                  VerticalAlignment="Center">
                                <Path Grid.Row="0"
                                      Width="4"
                                      Height="2"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Top"
                                      Data="M 0,0 L 4,0 2,2 Z"
                                      Stretch="Fill">
                                    <Shape.Fill>
                                        <Binding ElementName="Bd" Path="(TextElement.Foreground)" />
                                    </Shape.Fill>
                                </Path>
                                <Path Grid.Row="0"
                                      Width="4"
                                      Height="2"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Bottom"
                                      Data="M 0,0 L 4,0 2,2 Z"
                                      Stretch="Fill">
                                    <Shape.Fill>
                                        <Binding ElementName="Bd" Path="(TextElement.Foreground)" />
                                    </Shape.Fill>
                                </Path>
                            </Grid>
                            <Grid x:Name="Options"
                                  Width="6"
                                  Height="6"
                                  Margin="0,0,4,0"
                                  HorizontalAlignment="Right"
                                  VerticalAlignment="Center">
                                <Rectangle Width="1"
                                           Height="Auto"
                                           HorizontalAlignment="Left"
                                           VerticalAlignment="Stretch">
                                    <Shape.Fill>
                                        <Binding ElementName="Bd" Path="(TextElement.Foreground)" />
                                    </Shape.Fill>
                                </Rectangle>
                                <Path Width="3"
                                      Height="6"
                                      HorizontalAlignment="Right"
                                      VerticalAlignment="Center"
                                      Data="M 0,0 L 0,6 3,3 Z"
                                      Stretch="Fill">
                                    <Shape.Fill>
                                        <Binding ElementName="Bd" Path="(TextElement.Foreground)" />
                                    </Shape.Fill>
                                </Path>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="HasOverflowItems">
                                    <Binding.RelativeSource>
                                        <RelativeSource AncestorType="{x:Type this:ToolBar}" Mode="FindAncestor" />
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Overflow" Property="UIElement.Visibility" Value="Hidden" />
                        </DataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="IsQuickCustomizeEnabled">
                                    <Binding.RelativeSource>
                                        <RelativeSource AncestorType="{x:Type this:ToolBar}" Mode="FindAncestor" />
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Options" Property="UIElement.Visibility" Value="Hidden" />
                        </DataTrigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverBackgroundBegin}}" />
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverGlyph}}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverBackgroundBegin}}" />
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverGlyph}}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Bd" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverBackgroundBegin}}" />
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarOptionsMouseOverGlyph}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type ToolBar}}" TargetType="{x:Type this:ToolBar}">
        <Style.Resources>
            <ResourceDictionary Source="QuickCustomizeButton.xaml" />
        </Style.Resources>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarGradientBegin}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarToolBarBorder}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="imaging:ImageThemingUtilities.ImageBackgroundColor">
            <Setter.Value>
                <Binding Converter="{StaticResource BrushToColorConverter}"
                         Path="Background"
                         RelativeSource="{RelativeSource Self}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Band">
            <Setter.Value>
                <Binding Mode="TwoWay" Path="PlacementSlot" />
            </Setter.Value>
        </Setter>
        <Setter Property="BandIndex">
            <Setter.Value>
                <Binding Mode="TwoWay" Path="SortOrder" />
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type this:ToolBar}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                            <internals:ToolBarOverflowToggleButton x:Name="OverflowButton"
                                                                   ClickMode="Press"
                                                                   InputMethod.IsInputMethodSuspended="true"
                                                                   Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}"
                                                                   ToolTip="{Binding Path=Text, ConverterParameter=ToolBarToolTipText, Converter={StaticResource CommandBarFormattedStringConverter}}">
                                <UIElement.Visibility>
                                    <TemplateBindingExtension Converter="{StaticResource BoolToVisConverter}" Property="this:ToolBar.IsOverflowToggleButtonVisible" />
                                </UIElement.Visibility>
                                <ToggleButton.IsChecked>
                                    <Binding Mode="TwoWay"
                                             Path="IsOverflowOpen"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </ToggleButton.IsChecked>
                            </internals:ToolBarOverflowToggleButton>
                            <internals:ToolBarOverflowPopup x:Name="OverflowPopup"
                                                            AllowsTransparency="True"
                                                            Focusable="False"
                                                            Placement="Bottom"
                                                            StaysOpen="False">
                                <Popup.IsOpen>
                                    <Binding Path="IsOverflowOpen" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Popup.IsOpen>
                                <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                                    <Border Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBackgroundGradientBegin}}"
                                            BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBorder}}"
                                            BorderThickness="1"
                                            RenderOptions.BitmapScalingMode="{x:Static native:DpiHelper.BitmapScalingMode}"
                                            RenderOptions.ClearTypeHint="Enabled">
                                        <StackPanel KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                    Orientation="Vertical">
                                            <internals:ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                                                            Margin="2"
                                                                            HorizontalAlignment="Left"
                                                                            Focusable="True"
                                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                            Visibility="{TemplateBinding HasOverflowItems,
                                                                                                         Converter={StaticResource BoolToVisConverter}}"
                                                                            WrapWidth="200">
                                                <FrameworkElement.FocusVisualStyle>
                                                    <x:NullExtension />
                                                </FrameworkElement.FocusVisualStyle>
                                            </internals:ToolBarOverflowPanel>
                                            <StackPanel Orientation="Vertical" Visibility="{TemplateBinding IsQuickCustomizeEnabled, Converter={StaticResource BoolToVisConverter}}">
                                                <this:Separator Margin="2,2,2,0" Visibility="{TemplateBinding HasOverflowItems, Converter={StaticResource BoolToVisConverter}}" />
                                                <internals:DummyParentMenuItem>
                                                    <internals:QuickCustomizeButton this:ToolBar.IsToolBarHostedMenuItem="true"
                                                                                    DataContext="{TemplateBinding this:ToolBar.DataContext}"
                                                                                    Header="{x:Static commandBar:CommandBarResources.ToolBarQuickCustomizeText}"
                                                                                    QuickCustomizeDataSource="{Binding Path=Items, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                                                </internals:DummyParentMenuItem>
                                            </StackPanel>
                                        </StackPanel>
                                    </Border>
                                </windows:SystemDropShadowChrome>
                            </internals:ToolBarOverflowPopup>
                        </Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition x:Name="ShifterColumn" Width="10" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition x:Name="ShifterRow" Height="10" />
                            </Grid.RowDefinitions>
                            <Border x:Name="MainPanelBorder"
                                    Padding="{TemplateBinding Padding}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                    <Thumb x:Name="ToolBarThumb" Style="{StaticResource HorizontalToolBarThumbStyle}" />
                                    <ContentPresenter x:Name="ToolBarHeader"
                                                      Margin="4,0,4,0"
                                                      HorizontalAlignment="Center"
                                                      VerticalAlignment="Center"
                                                      ContentSource="Header"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    <internals:ToolBarPanel x:Name="PART_ToolBarPanel"
                                                            IsItemsHost="True"
                                                            IsStretching="{TemplateBinding this:ToolBar.IsStretching}"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </DockPanel>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="AreAnimationsAllowed" Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" />
                            </DataTrigger.Binding>
                            <Setter TargetName="OverflowPopup" Property="Popup.PopupAnimation" Value="None" />
                        </DataTrigger>
                        <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false" />
                        </Trigger>
                        <Trigger Property="HeaderedItemsControl.Header">
                            <Trigger.Value>
                                <x:NullExtension />
                            </Trigger.Value>
                            <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding ElementName="OverflowPopup" Path="(Popup.HasDropShadow)" />
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding Path="AreGradientsAllowed" Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" />
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="SnapsToDevicePixels" Value="True" />
                            <Setter TargetName="Shdw" Property="windows:SystemDropShadowChrome.Color" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" />
                        </MultiDataTrigger>
                        <Trigger Property="ToolBar.Orientation" Value="Vertical">
                            <Setter TargetName="OverflowButton" Property="FrameworkElement.Style" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}" />
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Height" Value="8" />
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Width" Value="Auto" />
                            <Setter TargetName="ToolBarThumb" Property="Control.Padding" Value="3,2,3,1" />
                            <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Style" Value="{StaticResource VerticalToolBarThumbStyle}" />
                            <Setter TargetName="ToolBarHeader" Property="FrameworkElement.Margin" Value="0,0,0,4" />
                            <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="PART_ToolBarPanel" Property="FrameworkElement.Margin" Value="1,0,2,2" />
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="OverflowGrid" Property="FrameworkElement.VerticalAlignment" Value="Bottom" />
                            <Setter TargetName="OverflowPopup" Property="Popup.Placement" Value="Right" />
                            <Setter Property="Control.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarGradientBegin}}" />
                            <Setter Property="FrameworkElement.MinWidth" Value="24" />
                            <Setter Property="FrameworkElement.MinHeight" Value="0" />
                        </Trigger>
                        <Trigger Property="ToolBar.Orientation" Value="Horizontal">
                            <Setter Property="FrameworkElement.MinWidth" Value="0" />
                            <Setter Property="FrameworkElement.MinHeight" Value="24" />
                        </Trigger>
                        <Trigger Property="ToolBar.Orientation" Value="Horizontal">
                            <Setter TargetName="ShifterRow" Property="RowDefinition.Height" Value="0" />
                        </Trigger>
                        <Trigger Property="ToolBar.Orientation" Value="Vertical">
                            <Setter TargetName="ShifterColumn" Property="ColumnDefinition.Width" Value="0" />
                        </Trigger>
                        <DataTrigger Value="Collapsed">
                            <DataTrigger.Binding>
                                <Binding ElementName="OverflowButton" Path="Visibility" />
                            </DataTrigger.Binding>
                            <Setter TargetName="ShifterRow" Property="RowDefinition.Height" Value="0" />
                            <Setter TargetName="ShifterColumn" Property="ColumnDefinition.Width" Value="0" />
                        </DataTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarButtonBaseStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Mode="OneWay" Path="CommandDefinition.GestureText" />
            </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ToolTip">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource ToolTipMultiConverter}">
                    <Binding Converter="{StaticResource AccessKeyRemovingConverter}"
                             Mode="OneWay"
                             Path="CommandDefinition.ToolTip" />
                    <Binding Mode="OneWay" Path="CommandDefinition.GestureText" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTipService.ShowOnDisabled" Value="true" />
        <Setter Property="ToggleButton.IsChecked">
            <Setter.Value>
                <Binding Mode="OneWay" Path="IsChecked" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Border"
                            Background="Transparent"
                            BorderBrush="Transparent"
                            BorderThickness="1">
                        <Grid x:Name="ContainingGrid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Image"
                                              Grid.Column="0"
                                              Margin="2"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              RecognizesAccessKey="True"
                                              Visibility="Collapsed" />
                            <AccessText x:Name="Text"
                                        Grid.Column="1"
                                        Margin="2,0,7,0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Text="{Binding Text, Converter={StaticResource AccessKeyConverter}}"
                                        Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Flags.Pict}" Value="True">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Visible" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Flags.Pict}" Value="False" />
                                <Condition Binding="{Binding Flags.TextOnly}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Visible" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Flags.TextOnly}" Value="True">
                            <Setter TargetName="Text" Property="UIElement.Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding CommandDefinition.ImageMonikerSource, Converter={StaticResource EmptyMonikerToBoolConverter}}" Value="True">
                            <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed" />
                            <Setter TargetName="Text" Property="UIElement.Visibility" Value="Visible" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="Visible">
                                    <Condition.Binding>
                                        <Binding ElementName="Text" Path="Visibility" />
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="Vertical">
                                    <Condition.Binding>
                                        <Binding Path="ParentToolBar.Orientation" RelativeSource="{RelativeSource Self}" />
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="False">
                                    <Condition.Binding>
                                        <Binding Path="(ToolBar.IsOverflowItem)" RelativeSource="{RelativeSource Self}" />
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ContainingGrid" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Image" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Text" Property="AccessText.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}" />
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}" />
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="True" />
                                <Condition Property="UIElement.IsEnabled" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelectedBorder}}" />
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelected}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextSelected}}" />
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}" />
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextMouseDown}}" />
                        </Trigger>
                        <MultiTrigger x:Uid="MultiTrigger_1">
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition Property="ToggleButton.IsChecked" Value="true" />
                                <Condition Property="UIElement.IsEnabled" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIconBorder}}" />
                            <Setter TargetName="Border" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIcon}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHoverOverSelected}}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static this:ToolBar.SeparatorStyleKey}" TargetType="{x:Type buttons:CommandDefinitionButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel x:Name="HostingStackPanel"
                                Margin="3,2,3,2"
                                SnapsToDevicePixels="True">
                        <Rectangle x:Name="SeparatorRectangle" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarToolBarSeparator}}" />
                        <Rectangle x:Name="SeparatorRectangle2" Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarToolBarSeparatorHighlight}}" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="Horizontal">
                            <DataTrigger.Binding>
                                <Binding Path="ParentToolBar.Orientation" RelativeSource="{RelativeSource Self}" />
                            </DataTrigger.Binding>
                            <Setter TargetName="SeparatorRectangle" Property="FrameworkElement.Width" Value="1" />
                            <Setter TargetName="SeparatorRectangle2" Property="FrameworkElement.Width" Value="1" />
                            <Setter TargetName="HostingStackPanel" Property="StackPanel.Orientation" Value="Horizontal" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="Vertical">
                                    <Condition.Binding>
                                        <Binding Path="ParentToolBar.Orientation" RelativeSource="{RelativeSource Self}" />
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="False">
                                    <Condition.Binding>
                                        <Binding Path="(ToolBar.IsOverflowItem)" RelativeSource="{RelativeSource Self}" />
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="SeparatorRectangle" Property="FrameworkElement.Height" Value="1" />
                            <Setter TargetName="SeparatorRectangle2" Property="FrameworkElement.Height" Value="1" />
                            <Setter TargetName="HostingStackPanel" Property="StackPanel.Orientation" Value="Vertical" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="Vertical">
                                    <Condition.Binding>
                                        <Binding Path="ParentToolBar.Orientation" RelativeSource="{RelativeSource Self}" />
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding Path="(ToolBar.IsOverflowItem)" RelativeSource="{RelativeSource Self}" />
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="SeparatorRectangle" Property="FrameworkElement.Width" Value="1" />
                            <Setter TargetName="SeparatorRectangle2" Property="FrameworkElement.Width" Value="1" />
                            <Setter TargetName="HostingStackPanel" Property="StackPanel.Orientation" Value="Horizontal" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static this:ToolBar.ButtonStyleKey}"
           BasedOn="{StaticResource ToolBarButtonBaseStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Converter="{StaticResource BoolToVisConverter}" Path="IsVisible" />
            </Setter.Value>
        </Setter>
        <Setter Property="Content">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource MonikerSourceToImageConverter}">
                    <Binding Path="CommandDefinition.ImageMonikerSource" />
                    <Binding Path="IsEnabled" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="InputMethod.IsInputMethodSuspended" Value="true" />
        <Style.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource NotNullConverter}" />
                </DataTrigger.Binding>
                <Setter Property="ButtonBase.Command">
                    <Setter.Value>
                        <Binding Converter="{StaticResource CommandBarItemCommandConverter}" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource IsSplitButtonModelConverter}" />
                </DataTrigger.Binding>
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Menu FocusManager.IsFocusScope="False" Style="{StaticResource ToolBarMenuStyle}">
                                <AutomationProperties.Name>
                                    <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
                                </AutomationProperties.Name>
                                <ItemsControl.Items>
                                    <buttons:SplitButton x:Name="PART_FocusTarget"
                                                         Icon="{TemplateBinding Content}"
                                                         ItemsSource="{Binding Items}">
                                        <buttons:SplitButton.SelectedIndex>
                                            <Binding Mode="TwoWay" Path="SelectedIndex" />
                                        </buttons:SplitButton.SelectedIndex>
                                    </buttons:SplitButton>
                                </ItemsControl.Items>
                                <Control.Template>
                                    <ControlTemplate TargetType="{x:Type Menu}">
                                        <ContentPresenter>
                                            <ContentPresenter.Content>
                                                <Binding Path="Items[0]" RelativeSource="{RelativeSource TemplatedParent}" />
                                            </ContentPresenter.Content>
                                        </ContentPresenter>
                                    </ControlTemplate>
                                </Control.Template>
                            </Menu>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static this:ToolBar.ComboBoxStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="IsEnabled" Value="{Binding IsEnabled, Mode=TwoWay}" />
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Converter="{StaticResource BoolToVisConverter}" Path="IsVisible" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="GestureText" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource ComboTemplate}" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextActive}}" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding Converter="{StaticResource IsComboBoxModelConverter}" />
                        </Condition.Binding>
                    </Condition>
                    <Condition Value="Vertical">
                        <Condition.Binding>
                            <Binding Path="ParentToolBar.Orientation" RelativeSource="{RelativeSource Self}" />
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Static this:ToolBar.MenuStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="false" />
        <Setter Property="Visibility">
            <Setter.Value>
                <Binding Converter="{StaticResource BoolToVisConverter}" Path="IsVisible" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Menu FocusManager.IsFocusScope="False" Style="{StaticResource ToolBarMenuStyle}">
                        <FrameworkElement.Resources>
                            <Style x:Key="{x:Static menu:Menu.MenuStyleKey}"
                                   BasedOn="{StaticResource {x:Static menu:Menu.MenuStyleKey}}"
                                   TargetType="{x:Type menu:MenuItem}">
                                <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
                                <Setter Property="Visibility" Value="Visible" />
                                <Setter Property="Padding" Value="2,1,1,0" />
                                <Setter Property="IsPlacedOnToolBar" Value="true" />
                            </Style>
                        </FrameworkElement.Resources>
                        <ItemsControl.Items>
                            <menu:MenuItem x:Name="PART_FocusTarget"
                                           this:ToolBar.IsToolBarHostedMenuItem="true"
                                           Style="{DynamicResource {x:Static menu:Menu.MenuStyleKey}}" />
                        </ItemsControl.Items>
                        <Control.Template>
                            <ControlTemplate TargetType="{x:Type Menu}">
                                <ItemsPresenter Name="ItemsPresenter" />
                            </ControlTemplate>
                        </Control.Template>
                    </Menu>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static this:ToolBar.MenuControllerStyleKey}">
        <Setter Property="Panel.Background" Value="Transparent" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="UIElement.IsEnabled">
            <Setter.Value>
                <Binding Path="IsEnabled" />
            </Setter.Value>
        </Setter>
        <Setter Property="UIElement.Visibility">
            <Setter.Value>
                <Binding Converter="{StaticResource BoolToVisConverter}" Path="IsVisible" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Mode="OneWay" Path="GestureText" />
            </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Menu FocusManager.IsFocusScope="False" Style="{StaticResource ToolBarMenuStyle}">
                        <AutomationProperties.Name>
                            <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
                        </AutomationProperties.Name>
                        <ItemsControl.Items>
                            <menu:MenuController x:Name="PART_FocusTarget"
                                                 this:ToolBar.IsToolBarHostedMenuItem="true"
                                                 AnchorItem="{Binding AnchorItem, Mode=TwoWay}"
                                                 ItemsSource="{Binding Items}"
                                                 ToolTipService.ShowOnDisabled="True">
                                <FrameworkElement.ToolTip>
                                    <MultiBinding Converter="{StaticResource MultiToolTipMultiConverter}">
                                        <Binding Converter="{StaticResource AccessKeyRemovingConverter}"
                                                 Mode="OneWay"
                                                 Path="CommandDefinition.ToolTip" />
                                        <Binding Converter="{StaticResource AccessKeyRemovingConverter}"
                                                 Mode="OneWay"
                                                 Path="AnchorItem.CommandDefinition.ToolTip" />
                                        <Binding Mode="OneWay" Path="AnchorItem.CommandDefinition.GestureText" />
                                    </MultiBinding>
                                </FrameworkElement.ToolTip>
                            </menu:MenuController>
                        </ItemsControl.Items>
                        <Control.Template>
                            <ControlTemplate TargetType="{x:Type Menu}">
                                <ItemsPresenter VerticalAlignment="Center" />
                            </ControlTemplate>
                        </Control.Template>
                    </Menu>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxItemTemplate" TargetType="{x:Type ComboBoxItem}">
        <Border Name="Bd"
                Padding="{TemplateBinding Control.Padding}"
                Background="{TemplateBinding Panel.Background}"
                BorderBrush="{TemplateBinding Border.BorderBrush}"
                BorderThickness="{TemplateBinding Border.BorderThickness}"
                SnapsToDevicePixels="true">
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ComboBoxItem.IsHighlighted" Value="true">
                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxItemMouseOverBackground}}" />
                <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxItemMouseOverBorder}}" />
                <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxItemMouseOverText}}" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost"
                Background="{TemplateBinding Background}"
                Focusable="False" />
    </ControlTemplate>
    <Style x:Key="DropDownToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent">
                        <Border x:Name="Border"
                                Width="13"
                                HorizontalAlignment="Right"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1,0,0,0"
                                SnapsToDevicePixels="True">
                            <Path x:Name="Arrow"
                                  Margin="0,1,0,0"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="{StaticResource DownArrowGeometry}"
                                  Fill="{TemplateBinding Foreground}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseDownBackground}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseDownSeparator}}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseDownGlyph}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseDownBackground}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseDownSeparator}}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseDownGlyph}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent">
                        <Border x:Name="Border"
                                Width="13"
                                HorizontalAlignment="Right"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1,0,0,0"
                                SnapsToDevicePixels="True">
                            <Path x:Name="Arrow"
                                  Margin="0,1,0,0"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="{StaticResource DownArrowGeometry}"
                                  Fill="{TemplateBinding TextElement.Foreground}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonMouseDownBackground}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonMouseDownSeparator}}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseDownGlyph}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonMouseDownBackground}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonMouseDownSeparator}}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseDownGlyph}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost"
                                  Background="Transparent"
                                  Focusable="False"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type comboBox:ComboBox}">
        <Border x:Name="Border"
                Background="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxBackground}}"
                BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxBorder}}"
                BorderThickness="1">
            <Grid Name="Placement" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup"
                       Grid.ColumnSpan="2"
                       AllowsTransparency="True"
                       Placement="Bottom"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Popup.IsOpen>
                        <Binding Path="IsDropDownOpen" RelativeSource="{RelativeSource TemplatedParent}" />
                    </Popup.IsOpen>
                    <windows:SystemDropShadowChrome x:Name="Shdw"
                                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                                    Color="Transparent">
                        <windows:SystemDropShadowChrome.MinWidth>
                            <Binding ElementName="Placement" Path="ActualWidth" />
                        </windows:SystemDropShadowChrome.MinWidth>
                        <Border x:Name="DropDownBorder"
                                BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxPopupBorder}}"
                                BorderThickness="1">
                            <ScrollViewer>
                                <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxPopupBackgroundBegin}}">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </windows:SystemDropShadowChrome>
                </Popup>
                <TextBox x:Name="PART_EditableTextBox"
                         Grid.Column="0"
                         Margin="0"
                         VerticalAlignment="Center"
                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                         Foreground="{TemplateBinding Foreground}"
                         SelectionBrush="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxSelection}}"
                         Style="{StaticResource ComboBoxEditableTextBox}">
                    <TextBox.CaretBrush>
                        <Binding Path="Foreground" RelativeSource="{RelativeSource Self}" />
                    </TextBox.CaretBrush>
                    <TextBox.IsReadOnly>
                        <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}" />
                    </TextBox.IsReadOnly>
                </TextBox>
                <ToggleButton x:Name="ToggleButton"
                              Grid.Column="1"
                              Background="Transparent"
                              BorderBrush="Transparent"
                              Foreground="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxGlyph}}"
                              Style="{StaticResource ComboBoxToggleButton}">
                    <ToggleButton.IsChecked>
                        <Binding Mode="TwoWay"
                                 Path="IsDropDownOpen"
                                 RelativeSource="{RelativeSource TemplatedParent}" />
                    </ToggleButton.IsChecked>
                </ToggleButton>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxFocusedButtonSeparator}}" />
                <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxFocusedButtonBackground}}" />
                <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxFocusedGlyph}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxFocusedBackground}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxFocusedBorder}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxFocusedText}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonMouseOverSeparator}}" />
                <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxButtonMouseOverBackground}}" />
                <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseOverGlyph}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseOverBackgroundBegin}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseOverBorder}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseOverText}}" />
            </Trigger>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseDownBackground}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseDownBorder}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxMouseDownText}}" />
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="DropDownBorder" Property="FrameworkElement.Height" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="ToggleButton" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="ToggleButton" Property="Background" Value="Transparent" />
                <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxDisabledGlyph}}" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxDisabledBackground}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxDisabledBorder}}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxDisabledText}}" />
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </Trigger>
            <DataTrigger Binding="{Binding ElementName=PART_Popup, Path=(Popup.HasDropShadow)}" Value="True">
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="windows:SystemDropShadowChrome.Color" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ComboBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="4,4,21,4"
                               SnapsToDevicePixels="true"
                               Stroke="Black"
                               StrokeDashArray="1 2"
                               StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type comboBox:ComboBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="utilities1:DteFocusHelper.AcquireFocus" Value="{Binding AcquireFocus}" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="DisplayedItem">
            <Setter.Value>
                <Binding Mode="TwoWay" Path="DisplayedItem" />
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownText}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="3,0,3,0" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type comboBox:ComboBoxItem}">
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxItemText}}" />
                    <Setter Property="AutomationProperties.Name" Value="{Binding Text}" />
                    <Setter Property="AutomationProperties.AutomationId" Value="{Binding Text}" />
                    <Setter Property="Template" Value="{StaticResource ComboBoxItemTemplate}" />
                    <Setter Property="Margin" Value="2,0,2,0" />
                    <Setter Property="InputMethod.IsInputMethodSuspended" Value="true" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type comboBox:ComboBox}">
                    <Border x:Name="Border"
                            Background="{DynamicResource {x:Static colors:EnvironmentColors.DropDownBackground}}"
                            BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.DropDownBorder}}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="0" MinWidth="12" />
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup"
                                   Grid.ColumnSpan="2"
                                   Margin="1"
                                   AllowsTransparency="True"
                                   Placement="Bottom"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                <Popup.IsOpen>
                                    <Binding Path="IsDropDownOpen" RelativeSource="{RelativeSource TemplatedParent}" />
                                </Popup.IsOpen>
                                <windows:SystemDropShadowChrome x:Name="Shdw"
                                                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                                                Color="Transparent">
                                    <FrameworkElement.MinWidth>
                                        <Binding ElementName="MainGrid" Path="ActualWidth" />
                                    </FrameworkElement.MinWidth>
                                    <Border x:Name="DropDownBorder"
                                            BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.DropDownPopupBorder}}"
                                            BorderThickness="1">
                                        <ScrollViewer>
                                            <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.DropDownPopupBackgroundBegin}}">
                                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </windows:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton x:Name="ToggleButton"
                                          Grid.Column="0"
                                          Grid.ColumnSpan="2"
                                          Background="Transparent"
                                          BorderBrush="Transparent"
                                          Foreground="{DynamicResource {x:Static colors:EnvironmentColors.DropDownGlyph}}"
                                          Style="{StaticResource DropDownToggleButton}">
                                <ToggleButton.IsChecked>
                                    <Binding Mode="TwoWay"
                                             Path="IsDropDownOpen"
                                             RelativeSource="{RelativeSource TemplatedParent}" />
                                </ToggleButton.IsChecked>
                            </ToggleButton>
                            <ContentPresenter Grid.Column="0"
                                              Margin="{TemplateBinding Control.Padding}"
                                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                              Content="{TemplateBinding DisplayedItem}"
                                              ContentTemplate="{TemplateBinding ItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              IsHitTestVisible="false"
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseOverSeparator}}" />
                            <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseOverBackground}}" />
                            <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverGlyph}}" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverBackgroundBegin}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverBorder}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverText}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseOverSeparator}}" />
                            <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownButtonMouseOverBackground}}" />
                            <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverGlyph}}" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverBackgroundBegin}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverBorder}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseOverText}}" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseDownBackground}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseDownBorder}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownMouseDownText}}" />
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="FrameworkElement.Height" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ToggleButton" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="ToggleButton" Property="Background" Value="Transparent" />
                            <Setter TargetName="ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownDisabledGlyph}}" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownDisabledBorder}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownDisabledBackground}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropDownDisabledText}}" />
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <DataTrigger Binding="{Binding ElementName=PART_Popup, Path=(Popup.HasDropShadow)}" Value="True">
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="windows:SystemDropShadowChrome.Color" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ComboBox.IsEditable" Value="true">
                <Setter Property="Control.IsTabStop" Value="false" />
                <Setter Property="Control.Template" Value="{StaticResource ComboBoxEditableTemplate}" />
                <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ComboBoxText}}" />
                <Setter Property="ComboBox.Text" Value="{Binding DisplayedText, Mode=TwoWay}" />
                <Setter Property="Control.Padding" Value="0" />
            </Trigger>
            <Trigger Property="ComboBox.IsEditable" Value="false">
                <Setter Property="InputMethod.IsInputMethodSuspended" Value="true" />
            </Trigger>
        </Style.Triggers>
    </Style>





    <Style TargetType="{x:Type buttons:CommandDefinitionButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <x:NullExtension />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Value="true">
                <DataTrigger.Binding>
                    <Binding Converter="{StaticResource IsNotSeparatorModelConverter}" />
                </DataTrigger.Binding>
                <Setter Property="utilities1:DteFocusHelper.AcquireFocus" Value="{Binding AcquireFocus}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource {x:Static this:ToolBar.ButtonStyleKey}}" TargetType="{x:Type menu:MenuControllerButton}">
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="Visibility" Value="Visible" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type menu:MenuControllerButton}">
                    <Grid x:Name="ContainingGrid"
                          HorizontalAlignment="Stretch"
                          VerticalAlignment="Stretch"
                          Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter x:Name="Image"
                                          Grid.Column="0"
                                          Margin="2"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <AccessText x:Name="Text"
                                    Grid.Column="1"
                                    Margin="2"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="IsEnabled">
                                    <Binding.RelativeSource>
                                        <RelativeSource AncestorType="{x:Type menu:MenuController}" Mode="FindAncestor" />
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter Property="ContentControl.Content">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MonikerSourceToImageConverter}">
                                        <Binding Path="CommandDefinition.ImageMonikerSource" />
                                        <Binding Path="IsEnabled">
                                            <Binding.RelativeSource>
                                                <RelativeSource AncestorType="{x:Type menu:MenuController}" Mode="FindAncestor" />
                                            </Binding.RelativeSource>
                                        </Binding>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <Binding Path="DataContext.Flags.PictAndText">
                                    <Binding.RelativeSource>
                                        <RelativeSource AncestorType="{x:Type menu:MenuController}" Mode="FindAncestor" />
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Text" Property="UIElement.Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger>
                            <DataTrigger.Binding>
                                <Binding Mode="OneWay"
                                         Path="Content"
                                         RelativeSource="{RelativeSource Self}" />
                            </DataTrigger.Binding>
                            <DataTrigger.Value>
                                <x:NullExtension />
                            </DataTrigger.Value>
                            <Setter TargetName="Text" Property="UIElement.Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="DataContext.Flags.TextIsAnchor">
                                    <Binding.RelativeSource>
                                        <RelativeSource AncestorType="{x:Type menu:MenuController}" Mode="FindAncestor" />
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Text" Property="AccessText.Text">
                                <Setter.Value>
                                    <Binding Converter="{StaticResource AccessKeyConverter}" Path="DataContext.Text">
                                        <Binding.RelativeSource>
                                            <RelativeSource AncestorType="{x:Type menu:MenuController}" Mode="FindAncestor" />
                                        </Binding.RelativeSource>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <Binding Path="DataContext.Flags.TextIsAnchor">
                                    <Binding.RelativeSource>
                                        <RelativeSource AncestorType="{x:Type menu:MenuController}" Mode="FindAncestor" />
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Text" Property="AccessText.Text">
                                <Setter.Value>
                                    <Binding Converter="{StaticResource AccessKeyConverter}" Path="AnchorItem.Text">
                                        <Binding.RelativeSource>
                                            <RelativeSource AncestorType="{x:Type menu:MenuController}" Mode="FindAncestor" />
                                        </Binding.RelativeSource>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="IsEnabled">
                                    <Binding.RelativeSource>
                                        <RelativeSource AncestorType="{x:Type menu:MenuController}" Mode="FindAncestor" />
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Text" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
                        </DataTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Text" Property="AccessText.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.ButtonForegroundDisabled}}" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="Vertical">
                                    <Condition.Binding>
                                        <Binding Path="ParentToolBar.Orientation" RelativeSource="{RelativeSource Self}" />
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="False">
                                    <Condition.Binding>
                                        <Binding Path="HostContainer.(ToolBar.IsOverflowItem)" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type menu:MenuController}}" />
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ContainingGrid" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Image" Property="FrameworkElement.LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="ContainingGrid" Property="Panel.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}" />
                            <Setter TargetName="Text" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextMouseDown}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type menu:MenuController}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsSubmenuOpen" Value="{Binding AreChildItemsDisplayed, Mode=TwoWay}" />
        <Setter Property="utilities1:DteFocusHelper.AcquireFocus" Value="{Binding AcquireFocus}" />
        <Setter Property="IsChecked">
            <Setter.Value>
                <Binding Mode="OneWay" Path="IsChecked" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="CommandDefinition.GestureText" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type menu:MenuController}">
                    <Border x:Name="NonCheckedBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="Transparent"
                            BorderThickness="1">
                        <Grid HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch"
                              SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup"
                                   Grid.ColumnSpan="3"
                                   Margin="1"
                                   AllowsTransparency="True"
                                   IsOpen="{TemplateBinding IsSubmenuOpen}"
                                   Placement="Bottom"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                                    <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuIconBackground}}">
                                        <menu:MenuScrollViewer>
                                            <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBackgroundGradientBegin}}">
                                                <imaging:ImageThemingUtilities.ImageBackgroundColor>
                                                    <Binding Converter="{StaticResource BrushToColorConverter}"
                                                             ElementName="IconBackground"
                                                             Path="Background" />
                                                </imaging:ImageThemingUtilities.ImageBackgroundColor>
                                                <Border x:Name="IconBackground"
                                                        HorizontalAlignment="Left"
                                                        Background="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuIconBackground}}" />
                                                <ItemsPresenter Margin="3"
                                                                Grid.IsSharedSizeScope="True"
                                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </Grid>
                                        </menu:MenuScrollViewer>
                                        <Border BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMenuBorder}}" BorderThickness="1" />
                                    </Grid>
                                </windows:SystemDropShadowChrome>
                            </Popup>
                            <Border x:Name="CheckedBorder"
                                    Grid.Column="0"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="Transparent"
                                    BorderThickness="1">
                                <menu:MenuControllerButton x:Name="MenuControllerButton"
                                                           HorizontalAlignment="Stretch"
                                                           VerticalAlignment="Stretch"
                                                           DataContext="{TemplateBinding AnchorItem}"
                                                           IsEnabled="{TemplateBinding IsEnabled}"
                                                           ToolTip="{TemplateBinding ToolTip}" />
                            </Border>
                            <Rectangle x:Name="SeparatorLine"
                                       Grid.Column="1"
                                       Width="1"
                                       VerticalAlignment="Stretch"
                                       Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonSeparator}}"
                                       Visibility="Hidden" />
                            <Grid x:Name="ArrowGrid"
                                  Grid.Column="2"
                                  Width="10"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch">
                                <Path x:Name="Arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="{StaticResource DownArrowGeometry}"
                                      Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonGlyph}}" />
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsEnabled" Value="true" />
                                <Condition Property="MenuItem.IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckedBorder" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelectedBorder}}" />
                            <Setter TargetName="CheckedBorder" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSelected}}" />
                            <Setter TargetName="MenuControllerButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextSelected}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsEnabled" Value="true" />
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition Property="MenuItem.IsChecked" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="NonCheckedBorder" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}" />
                            <Setter TargetName="NonCheckedBorder" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}" />
                            <Setter TargetName="SeparatorLine" Property="UIElement.Visibility" Value="Visible" />
                            <Setter TargetName="MenuControllerButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}" />
                            <Setter TargetName="Arrow" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseOverGlyph}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsEnabled" Value="true" />
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition Property="MenuItem.IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckedBorder" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIconBorder}}" />
                            <Setter TargetName="CheckedBorder" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIcon}}" />
                            <Setter TargetName="MenuControllerButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}" />
                            <Setter TargetName="Arrow" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseOverGlyph}}" />
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
                            <Setter TargetName="Arrow" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true" />
                                <Condition Property="MenuItem.IsChecked" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="NonCheckedBorder" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}" />
                            <Setter TargetName="NonCheckedBorder" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}" />
                            <Setter TargetName="SeparatorLine" Property="UIElement.Visibility" Value="Visible" />
                            <Setter TargetName="MenuControllerButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}" />
                            <Setter TargetName="Arrow" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseOverGlyph}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true" />
                                <Condition Property="MenuItem.IsChecked" Value="false" />
                                <Condition SourceName="MenuControllerButton" Property="ButtonBase.IsPressed" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckedBorder" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsKeyboardFocusWithin" Value="true" />
                                <Condition Property="MenuItem.IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckedBorder" Property="Border.BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIconBorder}}" />
                            <Setter TargetName="CheckedBorder" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarHoverOverSelectedIcon}}" />
                            <Setter TargetName="MenuControllerButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}" />
                            <Setter TargetName="Arrow" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseOverGlyph}}" />
                        </MultiTrigger>
                        <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                            <Setter TargetName="SeparatorLine" Property="UIElement.Visibility" Value="Hidden" />
                            <Setter TargetName="NonCheckedBorder" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}" />
                            <Setter TargetName="CheckedBorder" Property="Border.Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}" />
                            <Setter TargetName="MenuControllerButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextMouseDown}}" />
                            <Setter TargetName="Arrow" Property="Shape.Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseDownGlyph}}" />
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding ElementName="PART_Popup" Path="(Popup.HasDropShadow)" />
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding Path="AreGradientsAllowed" Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" />
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="windows:SystemDropShadowChrome.Color" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" />
                        </MultiDataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="AreAnimationsAllowed" Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" />
                            </DataTrigger.Binding>
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SplitButtonStyle"
           BasedOn="{StaticResource ToolBarButtonBaseStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Command">
            <Setter.Value>
                <Binding Converter="{StaticResource CommandBarItemCommandConverter}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="ContainingGrid" Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="ContentPresenter"
                                          Margin="2,2,4,2"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ContainingGrid" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource {x:Type ListBoxItem}}" TargetType="{x:Type buttons:SplitButtonItem}">
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Mode="OneTime" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="Content">
            <Setter.Value>
                <Binding Mode="OneTime" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="IsSelected">
            <Setter.Value>
                <Binding Path="IsHighlighted" RelativeSource="{RelativeSource Self}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:NullExtension}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Key="{x:Type buttons:SplitButtonItem}" TargetType="{x:Type buttons:SplitButtonItem}">
                    <Border x:Name="Border"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="buttons:SplitButtonItem.IsHighlighted" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextHover}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type buttons:SplitButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="AutomationProperties.Name">
            <Setter.Value>
                <Binding Converter="{StaticResource AccessKeyRemovingConverter}" Path="Text" />
            </Setter.Value>
        </Setter>
        <Setter Property="AutomationProperties.AcceleratorKey">
            <Setter.Value>
                <Binding Path="GestureText" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type buttons:SplitButton}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="Transparent"
                            BorderThickness="1">
                        <Grid HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch"
                              SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup"
                                   Grid.ColumnSpan="3"
                                   MinWidth="155"
                                   MaxHeight="210"
                                   Margin="1"
                                   AllowsTransparency="True"
                                   IsOpen="{TemplateBinding IsSubmenuOpen}"
                                   Placement="Bottom"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                <windows:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                                    <Border BorderBrush="{DynamicResource {x:Static colors:EnvironmentColors.DropDownPopupBorder}}" BorderThickness="1">
                                        <Grid HorizontalAlignment="Stretch"
                                              VerticalAlignment="Stretch"
                                              SnapsToDevicePixels="True">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <ScrollViewer x:Name="PART_ScrollViewer"
                                                          Grid.Row="0"
                                                          VerticalScrollBarVisibility="Auto">
                                                <Grid Background="{DynamicResource {x:Static colors:EnvironmentColors.DropDownPopupBackgroundBegin}}">
                                                    <ItemsPresenter Margin="3"
                                                                    Grid.IsSharedSizeScope="True"
                                                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </Grid>
                                            </ScrollViewer>
                                            <StatusBar Grid.Row="1"
                                                       HorizontalAlignment="Stretch"
                                                       Background="{DynamicResource {x:Static colors:EnvironmentColors.SystemWindow}}"
                                                       Foreground="{DynamicResource {x:Static colors:EnvironmentColors.SystemGrayText}}">
                                                <StatusBarItem HorizontalAlignment="Center">
                                                    <TextBlock Text="{Binding StatusString}" />
                                                </StatusBarItem>
                                            </StatusBar>
                                        </Grid>
                                    </Border>
                                </windows:SystemDropShadowChrome>
                            </Popup>
                            <Button Grid.Column="0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Content="{TemplateBinding Icon}"
                                    Focusable="False"
                                    IsEnabled="{TemplateBinding IsEnabled}"
                                    Style="{StaticResource SplitButtonStyle}" />
                            <Rectangle x:Name="SeparatorLine"
                                       Grid.Column="1"
                                       Width="1"
                                       VerticalAlignment="Stretch"
                                       Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonSeparator}}"
                                       Visibility="Hidden" />
                            <Grid Grid.Column="2"
                                  Margin="2,0,2,0"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  Background="Transparent">
                                <Path x:Name="Arrow"
                                      Margin="0,1,0,0"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Data="{StaticResource DownArrowGeometry}"
                                      Fill="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonGlyph}}" />
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarTextInactive}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="true" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}" />
                            <Setter TargetName="SeparatorLine" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseOverGlyph}}" />
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarBorder}}" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseOverBackgroundBegin}}" />
                            <Setter TargetName="SeparatorLine" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseOverGlyph}}" />
                        </Trigger>
                        <Trigger Property="IsSubmenuOpen" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarMouseDownBackgroundBegin}}" />
                            <Setter TargetName="SeparatorLine" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static colors:EnvironmentColors.CommandBarSplitButtonMouseDownGlyph}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding ElementName="PART_Popup" Path="(Popup.HasDropShadow)" />
                                    </Condition.Binding>
                                </Condition>
                                <Condition Value="True">
                                    <Condition.Binding>
                                        <Binding Path="AreGradientsAllowed" Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" />
                                    </Condition.Binding>
                                </Condition>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="windows:SystemDropShadowChrome.Color" Value="{DynamicResource {x:Static colors:EnvironmentColors.DropShadowBackground}}" />
                        </MultiDataTrigger>
                        <DataTrigger Value="False">
                            <DataTrigger.Binding>
                                <Binding Path="AreAnimationsAllowed" Source="{x:Static basics:EnvironmentRenderCapabilities.Current}" />
                            </DataTrigger.Binding>
                            <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource {x:Type ToolBarTray}}" TargetType="{x:Type this:ToolBarTray}" />
    <Style BasedOn="{StaticResource {x:Type this:ToolBarTray}}" TargetType="{x:Type this:AnchorableToolBarTray}">
        <Style.Resources>
            <Style BasedOn="{StaticResource {x:Type this:ToolBar}}" TargetType="{x:Type this:ToolBar}">
                <Setter Property="IsStretching" Value="True" />
                <Setter Property="IsQuickCustomizeEnabled" Value="false" />
                <Setter Property="Padding" Value="4,2,4,2" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="UseLayoutRounding" Value="True" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
                <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
                <Setter Property="RenderOptions.BitmapScalingMode" Value="{x:Static native:DpiHelper.BitmapScalingMode}" />
            </Style>
        </Style.Resources>
        <Setter Property="IsLocked" Value="True" />
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="{x:Static menu:MenuController.ButtonStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.ButtonStyleKey}}"
           TargetType="{x:Type menu:MenuItem}" />
    <Style x:Key="{x:Static menu:MenuController.MenuControllerStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.MenuControllerStyleKey}}"
           TargetType="{x:Type menu:MenuItem}" />
    <Style x:Key="{x:Static menu:MenuController.MenuStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.MenuStyleKey}}"
           TargetType="{x:Type menu:MenuItem}" />
    <Style x:Key="{x:Static menu:MenuController.SeparatorStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.SeparatorStyleKey}}"
           TargetType="{x:Type menu:MenuItem}" />
    <Style x:Key="{x:Static menu:MenuController.ComboBoxStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.ComboBoxStyleKey}}"
           TargetType="{x:Type menu:MenuItem}" />
    <Style x:Key="{x:Static menu:ContextMenu.ButtonStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.ButtonStyleKey}}"
           TargetType="{x:Type menu:MenuItem}" />
    <Style x:Key="{x:Static menu:ContextMenu.MenuStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.MenuStyleKey}}"
           TargetType="{x:Type menu:MenuItem}" />
    <Style x:Key="{x:Static menu:ContextMenu.SeparatorStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.SeparatorStyleKey}}"
           TargetType="{x:Type menu:MenuItem}" />
    <Style x:Key="{x:Static menu:ContextMenu.ComboBoxStyleKey}"
           BasedOn="{StaticResource {x:Static menu:MenuItem.ComboBoxStyleKey}}"
           TargetType="{x:Type menu:MenuItem}" />
</ResourceDictionary>