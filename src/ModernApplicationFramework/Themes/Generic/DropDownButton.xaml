<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:this="clr-namespace:ModernApplicationFramework.Controls"
                    xmlns:themes="clr-namespace:ModernApplicationFramework.Core.Themes"
                    xmlns:dock="clr-namespace:ModernApplicationFramework.Docking.Controls"
                    xmlns:primitives="clr-namespace:ModernApplicationFramework.Controls.Primitives"
                    xmlns:general="clr-namespace:ModernApplicationFramework.Core.Converters.General"
                    xmlns:buttons="clr-namespace:ModernApplicationFramework.Controls.Buttons">
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Brushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <general:InverseBoolConverter x:Key="InverseBoolConverter"/>
    
    <Style TargetType="{x:Type buttons:DropDownButton}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type buttons:DropDownButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                        <ToggleButton x:Name="PART_DropDownButton" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                      IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <ContentPresenter/>
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <Grid>
                               <primitives:DropDownButtonBase x:Name="ButtonBase" RenderChecked="{TemplateBinding IsOpen}" 
                                                        RenderEnabled="{TemplateBinding IsEnabled}" 
                                                        RenderMouseOver="{Binding IsMouseOver, ElementName=PART_DropDownButton}"
                                                        RenderPressed="{Binding IsPressed, ElementName=PART_DropDownButton}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  RecognizesAccessKey="True"/>
                                        <Grid x:Name="arrowGlyph" IsHitTestVisible="False" Margin="3,3,4,3" Grid.Column="1">
                                            <Path x:Name="Arrow"  Width="8" Height="4" Data="M 0 0 L 4 4 L 8 0 Z" Fill="{DynamicResource {x:Static themes:EnvironmentColors.DropDownGlyph}}">
                                                <Path.LayoutTransform>
                                                    <ScaleTransform ScaleX="0.8" ScaleY="0.8"/>
                                                </Path.LayoutTransform>
                                            </Path>
                                        </Grid>
                                    </Grid>
                                </primitives:DropDownButtonBase>
                                <!-- Button Base-->                
                            </Grid>
                        </ToggleButton>
                        <Popup Name="PART_Popup" HorizontalOffset="1" VerticalOffset="1" AllowsTransparency="True" StaysOpen="False" Placement="Bottom" Focusable="False"
                               IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}">
                                <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding DropDownContent}"/>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static themes:EnvironmentColors.DropDownMouseOverGlyph}}"/>
                            <Setter TargetName="ButtonBase" Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DropDownButtonMouseOverBackground}}"/>
                            <Setter TargetName="ButtonBase" Property="Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.DropDownMouseOverText}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True" SourceName="PART_DropDownButton">
                            <Setter TargetName="ButtonBase" Property="Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.DropDownMouseDownText}}"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static themes:EnvironmentColors.DropDownMouseDownGlyph}}"/>
                            <Setter TargetName="ButtonBase" Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DropDownButtonMouseDownBackground}}"/>
                        </Trigger>
                        <Trigger Property="IsOpen" Value="True" SourceName="PART_Popup">
                            <Setter TargetName="ButtonBase" Property="Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.DropDownMouseDownText}}"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static themes:EnvironmentColors.DropDownMouseDownGlyph}}"/>
                            <Setter TargetName="ButtonBase" Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DropDownButtonMouseDownBackground}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <Style TargetType="{x:Type dock:DropDownButton}">
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.WindowTitleBarButtonBackground}}"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.WindowTitleBarButtonForeground}}"></Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.WindowTitleBarButtonBorder}}"></Setter>
        <Setter Property="Padding" Value="0,1,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dock:DropDownButton">
                    <Border x:Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" 
                            BorderThickness="{TemplateBinding Control.BorderThickness}" Padding="{TemplateBinding Control.Padding}">
                            <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.WindowTitleBarButtonHoverBackground}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.WindowTitleBarButtonHoverBorder}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.WindowTitleBarButtonHoverForeground}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.WindowTitleBarButtonDownForeground}}"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.WindowTitleBarButtonDownBackground}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.WindowTitleBarButtonDownBorder}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.WindowTitleBarButtonDownForeground}}"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.WindowTitleBarButtonDownBackground}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.WindowTitleBarButtonDownBorder}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    
</ResourceDictionary>