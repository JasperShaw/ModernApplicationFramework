<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:avalonDockControls="clr-namespace:ModernApplicationFramework.Docking.Controls"
                    xmlns:converters="clr-namespace:ModernApplicationFramework.Docking.Converters"
                    xmlns:themes="clr-namespace:ModernApplicationFramework.Core.Themes;assembly=ModernApplicationFramework">

    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <converters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />
    <converters:AnchorSideToOrientationConverter x:Key="AnchorSideToOrientationConverter" />
    <converters:AnchorSideToAngleConverter x:Key="AnchorSideToAngleConverter" />
    <converters:NullToDoNothingConverter x:Key="NullToDoNothingConverter" />
    <converters:LayoutItemFromLayoutModelConverter x:Key="LayoutItemFromLayoutModelConverter" />
    <converters:ActivateCommandLayoutItemFromLayoutModelConverter x:Key="ActivateCommandLayoutItemFromLayoutModelConverter" />

    <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorder}}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="ToolTip" Value="{Binding ToolTip}" />
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="Margin" Value="-2,0,1,0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemText}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="Bd"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1,1,1,0">
                            <ContentPresenter x:Name="Content"
                                              Margin="0,0,1,0"
                                              HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                              VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                              ContentSource="Header"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Selector.IsSelected" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorderLastActive}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackgroundLastActive}}" />
                            <Setter Property="Panel.ZIndex" Value="1" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive}" Value="True" />
                                <Condition Binding="{Binding IsLastFocusedDocument}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorderActive}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackgroundActive}}" />
                            <Setter Property="Panel.ZIndex" Value="1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive}" Value="True" />
                                <Condition Binding="{Binding IsLastFocusedDocument}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorderActive}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackgroundActive}}" />
                            <Setter Property="Panel.ZIndex" Value="1" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive}" Value="False" />
                                <Condition Binding="{Binding IsLastFocusedDocument}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorderLastActive}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackgroundLastActive}}" />
                            <Setter Property="Panel.ZIndex" Value="1" />
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="IsSelected" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorderHover}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackgroundHover}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemTextHover}}" />
                            <Setter Property="Panel.ZIndex" Value="0" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBorderDisabled}}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentTabItemBackgroundDisabled}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DocumentPaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
        <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlBackgroundLastActive}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
                    <Grid ClipToBounds="true"
                          KeyboardNavigation.TabNavigation="Local"
                          SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <!--  Following border is required to catch mouse events  -->
                        <Border Grid.RowSpan="2" Background="Transparent" />
                        <Grid Panel.ZIndex="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <avalonDockControls:DocumentPaneTabPanel x:Name="HeaderPanel"
                                                                     Grid.Row="0"
                                                                     Grid.Column="0"
                                                                     Margin="2,0,2,0"
                                                                     ExpandedTearOffMargin="50"
                                                                     IsItemsHost="true"
                                                                     KeyboardNavigation.TabIndex="1"
                                                                     ZIndex="1" />
                            <avalonDockControls:DropDownButton x:Name="MenuDropDownButton"
                                                               Grid.Column="1"
                                                               Width="14"
                                                               Height="14"
                                                               VerticalAlignment="Center"
                                                               Background="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBackground}}"
                                                               BorderBrush="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBorder}}"
                                                               BorderThickness="1"
                                                               Focusable="False">
                                <avalonDockControls:DropDownButton.DropDownContextMenu>
                                    <avalonDockControls:ContextMenuEx ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}">
                                        <avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                            <Style TargetType="{x:Type avalonDockControls:MenuItemEx}">
                                                <Setter Property="Header" Value="{Binding}" />
                                                <Setter Property="HeaderTemplate" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplate}" />
                                                <Setter Property="HeaderTemplateSelector" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}" />
                                                <Setter Property="IconTemplate" Value="{Binding Path=Root.Manager.IconContentTemplate}" />
                                                <Setter Property="IconTemplateSelector" Value="{Binding Path=Root.Manager.IconContentTemplateSelector}" />
                                                <Setter Property="Command" Value="{Binding Path=., Converter={StaticResource ActivateCommandLayoutItemFromLayoutModelConverter}}" />
                                            </Style>
                                        </avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                    </avalonDockControls:ContextMenuEx>
                                </avalonDockControls:DropDownButton.DropDownContextMenu>
                                <Path x:Name="MenuButtonPath"
                                      Width="8"
                                      Height="4"
                                      Data="F1 M 0,0 L 4,4 8,0 0,0 z"
                                      Fill="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlGlyph}}"
                                      Stretch="None" />
                            </avalonDockControls:DropDownButton>
                        </Grid>
                        <Grid Grid.Row="1" Grid.Column="0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border Height="2"
                                    Padding="0,1,0,0"
                                    Background="{TemplateBinding Background}" />
                            <Border x:Name="ContentPanel"
                                    Grid.Row="1"
                                    Grid.Column="0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    BorderBrush="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlBorder}}"
                                    BorderThickness="1,0,1,1"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    KeyboardNavigation.TabIndex="2"
                                    KeyboardNavigation.TabNavigation="Cycle">
                                <ContentPresenter x:Name="PART_SelectedContentHost"
                                                  Margin="0,1,0,0"
                                                  ContentSource="SelectedContent"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="MenuDropDownButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="MenuButtonPath" Property="Fill" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlGlyphHover}}" />
                            <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBackgroundHover}}" />
                            <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBorderHover}}" />
                        </Trigger>
                        <Trigger SourceName="MenuDropDownButton" Property="IsChecked" Value="True">
                            <Setter TargetName="MenuButtonPath" Property="Fill" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlGlyphDown}}" />
                            <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBackgroundDown}}" />
                            <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBorderDown}}" />
                        </Trigger>
                        <Trigger SourceName="MenuDropDownButton" Property="IsPressed" Value="True">
                            <Setter TargetName="MenuButtonPath" Property="Fill" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlGlyphDown}}" />
                            <Setter TargetName="MenuDropDownButton" Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBackgroundDown}}" />
                            <Setter TargetName="MenuDropDownButton" Property="BorderBrush" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlButtonBorderDown}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsLastFocusedDocument}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlBackground}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsLastFocusedDocument}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlBackground}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsActive}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.SelectedContent.IsLastFocusedDocument}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:EnvironmentColors.DocumentPaneControlBackgroundLastActive}}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Model.ChildrenCount}" Value="0">
                            <Setter TargetName="MenuDropDownButton" Property="Visibility" Value="Collapsed" />
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{StaticResource TabItemStyle}" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentTabItem Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentControl Model="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>