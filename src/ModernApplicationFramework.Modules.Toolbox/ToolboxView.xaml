<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:design="clr-namespace:ModernApplicationFramework.Modules.Toolbox.Design"
             xmlns:toolbox="clr-namespace:ModernApplicationFramework.Modules.Toolbox"
             xmlns:themes="clr-namespace:ModernApplicationFramework.Core.Themes;assembly=ModernApplicationFramework"
             xmlns:general="clr-namespace:ModernApplicationFramework.Core.Converters.General;assembly=ModernApplicationFramework"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:utilities="clr-namespace:ModernApplicationFramework.Utilities;assembly=ModernApplicationFramework.Utilities"
             xmlns:converters="clr-namespace:ModernApplicationFramework.Utilities.Converters;assembly=ModernApplicationFramework.Utilities"
             xmlns:imaging="clr-namespace:ModernApplicationFramework.Utilities.Imaging;assembly=ModernApplicationFramework.Utilities"
             xmlns:mafdd="http://modern.framework.com/dragdrop"
             xmlns:controls="clr-namespace:ModernApplicationFramework.Modules.Toolbox.Controls"
             x:Class="ModernApplicationFramework.Modules.Toolbox.ToolboxView"
             mc:Ignorable="d" d:DataContext="{d:DesignInstance {x:Type design:DesignTimeToolboxViewModel}, IsDesignTimeCreatable=True}"
             d:DesignHeight="300" d:DesignWidth="300" Background="White">

    <imaging:ImageThemingUtilities.ImageBackgroundColor>
        <Binding Path="Background" RelativeSource="{RelativeSource Self}">
            <Binding.Converter>
                <converters:BrushToColorConverter/>
            </Binding.Converter>
        </Binding>
    </imaging:ImageThemingUtilities.ImageBackgroundColor>

    <FrameworkElement.Resources>

        <general:AreEqualConverter x:Key="AreEqualConverter"/>
        <converters:ThemedImageSourceConverter x:Key="ThemedImageSourceConverter"/>

        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="Transparent" Height="16" Width="16" Padding="5">
                            <Path x:Name="ExpandedPath" Data="{StaticResource TreeArrow}" Fill="Transparent"
                                  Stroke="{TemplateBinding BorderBrush}" Stretch="UniformToFill">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="ExpandedPath" Property="RenderTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="ExpandedPath" Property="Fill" 
                                        Value="{Binding Background, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CategoryItemStyle" TargetType="{x:Type TreeViewItem}">
            <Setter Property="TextElement.Foreground"
                    Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxBackgroundText}}"/>
            <Setter Property="Background"
                    Value="Transparent"/>
            <Setter Property="Border.BorderBrush" Value="Transparent"/>
            <Setter Property="IsExpanded">
                <Setter.Value>
                    <Binding Path="IsExpanded" Mode="TwoWay"/>
                </Setter.Value>
            </Setter>
            <Setter Property="Width">
                <Setter.Value>
                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType=TreeView}"/>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemsSource">
                <Setter.Value>
                    <Binding Path="Items"/>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Rectangle x:Name="ItemRect" Grid.Row="0" Grid.ColumnSpan="3"/>
                            <ToggleButton Grid.Row="0" x:Name="Expander" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{StaticResource ExpandCollapseToggleStyle}"
                                          Background="Transparent" BorderBrush="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxCategoryExtenderBorder}}"/>
                            <Border Grid.Row="0" Grid.Column="1" Padding="{TemplateBinding Padding}" 
                                    SnapsToDevicePixels="True">
                                <TextBlock x:Name="CategoryName" Padding="2" Margin="-1,0,0,0" Text="{Binding Name}"/>
                            </Border>
                            <TextBlock x:Name="PART_EmptyMessage" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"
                                    TextWrapping="WrapWithOverflow" TextAlignment="Center" TextTrimming="None" 
                                       Margin="-5,15,10,0"  Text="No items in this group currently"/>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="ItemsControl.HasItems" Value="true"/>
                                    <Condition Property="IsExpanded" Value="true"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter TargetName="PART_EmptyMessage" Property="UIElement.Visibility" Value="Collapsed"/>
                                </MultiTrigger.Setters>
                            </MultiTrigger>
                            <Trigger Property="IsExpanded" Value="True">
                                <Setter TargetName="Expander" Property="Background" Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxCategoryExtenderBackground}}"/>
                                <Setter TargetName="Expander" Property="BorderBrush" Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxCategoryExtenderBorder}}"/>
                            </Trigger>
                            <Trigger Property="TreeViewItem.IsSelected" Value="true">
                                <Setter TargetName="CategoryName"
                                        Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxItemSelectedText}}"
                                        Property="TextElement.Foreground"/>
                                <Setter TargetName="ItemRect"
                                        Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxItemSelected}}"
                                        Property="Fill"/>
                                <Setter TargetName="Expander" Property="BorderBrush" Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxCategorySelectedExtenderBorder}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                                    <Condition Property="IsExpanded" Value="true"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter TargetName="Expander" Property="Background" Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxCategorySelectedExtenderBackground}}"/>
                                </MultiTrigger.Setters>
                            </MultiTrigger>
                            <Trigger Property="TreeViewItem.IsExpanded" Value="false">
                                <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed"/>
                                <Setter TargetName="PART_EmptyMessage" Property="UIElement.Visibility" Value="Collapsed"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="CategoryName" Property="TextElement.Foreground"
                                        Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxItemInactiveText}}"/>
                                <Setter TargetName="ItemRect" Property="Fill"
                                        Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxItemInactive}}"/>
                                <Setter TargetName="Expander" Property="Background" Value="Black"/>
                                <Setter TargetName="Expander" Property="BorderBrush" Value="Black"/>
                            </MultiTrigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ItemStyle" TargetType="{x:Type TreeViewItem}">
            <Setter Property="IsExpanded">
                <Setter.Value>
                    <MultiBinding Converter="{StaticResource AreEqualConverter}">
                        <Binding/>
                        <Binding Path="DataContext.SelectedNode"
                                 RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type UserControl}}"/>
                    </MultiBinding>
                </Setter.Value>
            </Setter>
            <Setter Property="MinHeight" Value="22"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <ControlTemplate.Resources>
                            <converters:LeftMarginMultiplierConverter Length="19" x:Key="LengthConverter"/>
                        </ControlTemplate.Resources>
                        <StackPanel Margin="-19,0,0,0">
                            <Border x:Name="Bd" Height="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid Margin="{Binding Converter={StaticResource LengthConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="0"/>
                                        <ColumnDefinition Width="12"/>
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Image Grid.Column="1" Width="12" Height="12" 
                                           RenderOptions.BitmapScalingMode="Linear" RenderOptions.EdgeMode="Aliased">
                                        <Image.Source>
                                            <MultiBinding Converter="{StaticResource ThemedImageSourceConverter}">
                                                <Binding Path="IconSource"/>
                                                <Binding Path="(imaging:ImageThemingUtilities.ImageBackgroundColor)"
                                                         RelativeSource="{RelativeSource Self}"/>
                                                <Binding Source="{x:Static utilities:Boxes.BooleanTrue}"/>
                                            </MultiBinding>
                                        </Image.Source>
                                    </Image>
                                    <TextBlock Grid.Column="2" x:Name="HeaderPresenter" Padding="3,0,15,0" Margin="12,0,0,0"
                                               TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" HorizontalAlignment="Left" 
                                               VerticalAlignment="Center"
                                               Foreground="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxBackgroundText}}">
                                        <TextBlock.Text>
                                            <Binding Path="Name"/>
                                        </TextBlock.Text>
                                        <FrameworkElement.ToolTip>
                                            <Binding Path="Name"/>
                                        </FrameworkElement.ToolTip>
                                    </TextBlock>
                                </Grid>
                            </Border>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="HeaderPresenter"
                                        Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxItemHoverText}}"
                                        Property="Foreground"/>
                                <Setter TargetName="Bd"
                                        Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxItemHover}}"
                                        Property="Background"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="HeaderPresenter"
                                        Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxItemSelectedText}}"
                                        Property="Foreground"/>
                                <Setter TargetName="Bd"
                                        Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxItemSelected}}"
                                        Property="Background"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="HeaderPresenter" Property="TextElement.Foreground"
                                        Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxItemInactiveText}}"/>
                                <Setter TargetName="Bd" Property="Background"
                                        Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxItemInactive}}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                                    <Condition Property="TreeViewItem.IsMouseOver" Value="true"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="HeaderPresenter" Property="TextElement.Foreground"
                                        Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxItemSelectedText}}"/>
                                <Setter TargetName="Bd" Property="Background"
                                        Value="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxItemSelected}}"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <toolbox:ToolboxTreeNodeStyleSelector x:Key="ToolboxTreeNodeStyleSelector" 
                                    CategoryStyle="{StaticResource CategoryItemStyle}"
                                              ItemStyle="{StaticResource ItemStyle}"/>
    </FrameworkElement.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <TextBox Grid.Row="0"/>
        <controls:ToolboxTreeView x:Name="TreeView" Grid.Row="1" Margin="0,3,0,0"
                  mafdd:DragDrop.IsDragSource="True"
                  mafdd:DragDrop.IsDropTarget="True"
                  mafdd:DragDrop.DragHandler="{Binding ToolboxDragHandler}"
                  mafdd:DragDrop.DropHandler="{Binding ToolboxDropHandler}"
                  ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                  ItemContainerStyleSelector="{StaticResource ToolboxTreeNodeStyleSelector}"
                  Background="{DynamicResource {x:Static toolbox:ToolBoxColors.ToolboxBackground}}" 
                                  BorderThickness="0" ItemsSource="{Binding Categories}">
            <i:Interaction.Behaviors>
                <utilities:BindableSelectedItemBehavior SelectedItem="{Binding SelectedNode, Mode=TwoWay}" />
            </i:Interaction.Behaviors>
        </controls:ToolboxTreeView>
    </Grid>
</UserControl>
